import struct
from dataclasses import dataclass, field, is_dataclass
from enum import IntEnum
from scapy.all import *

# auto-generated by by eobi_code_generator.py
# code adapted from George Sauthoff with the following liscense info
# SPDX-FileCopyrightText: Â© 2021 Georg Sauthoff <mail@gms.tf>
# SPDX-License-Identifier: BSL-1.0
		
version = '10.0'
sub_version = 'None'
build = '101.3.19.ga-101004050-123'

class TemplateID(IntEnum):
    LogonRequest = 10000
    LogonResponse = 10001
    LogoutRequest = 10002
    LogoutResponse = 10003
    SubscribeResponse = 10005
    UnsubscribeRequest = 10006
    UnsubscribeResponse = 10007
    RetransmitRequest = 10008
    RetransmitResponse = 10009
    Reject = 10010
    Heartbeat = 10011
    ForcedLogoutNotification = 10012
    UserLoginRequest = 10018
    UserLoginResponse = 10019
    HeartbeatNotification = 10023
    UserLogoutResponse = 10024
    SubscribeRequest = 10025
    RetransmitMEMessageRequest = 10026
    RetransmitMEMessageResponse = 10027
    ThrottleUpdateNotification = 10028
    UserLogoutRequest = 10029
    ServiceAvailabilityBroadcast = 10030
    NewsBroadcast = 10031
    BroadcastErrorNotification = 10032
    RiskNotificationBroadcast = 10033
    PartyEntitlementsUpdateReport = 10034
    InquireSessionListRequest = 10035
    InquireSessionListResponse = 10036
    LegalNotificationBroadcast = 10037
    InquireUserRequest = 10038
    InquireUserResponse = 10039
    InquireEnrichmentRuleIDListRequest = 10040
    InquireEnrichmentRuleIDListResponse = 10041
    PartyActionReport = 10042
    ForcedUserLogoutNotification = 10043
    ServiceAvailabilityMarketBroadcast = 10044
    NewOrderSingleRequest = 10100
    NewOrderResponse = 10101
    NewOrderNRResponse = 10102
    OrderExecResponse = 10103
    OrderExecNotification = 10104
    ModifyOrderSingleRequest = 10106
    ModifyOrderResponse = 10107
    ModifyOrderNRResponse = 10108
    DeleteOrderSingleRequest = 10109
    DeleteOrderResponse = 10110
    DeleteOrderNRResponse = 10111
    DeleteOrderBroadcast = 10112
    NewOrderComplexRequest = 10113
    ModifyOrderComplexRequest = 10114
    OrderExecReportBroadcast = 10117
    CrossRequest = 10118
    CrossRequestResponse = 10119
    DeleteAllOrderRequest = 10120
    DeleteAllOrderResponse = 10121
    DeleteAllOrderBroadcast = 10122
    DeleteOrderComplexRequest = 10123
    DeleteAllOrderNRResponse = 10124
    NewOrderSingleShortRequest = 10125
    ModifyOrderSingleShortRequest = 10126
    NewOrderComplexShortRequest = 10129
    ModifyOrderComplexShortRequest = 10130
    EnterCLIPRequest = 10131
    DeleteCLIPRequest = 10132
    CLIPResponse = 10133
    CLIPDeletionNotification = 10134
    CLIPExecutionNotification = 10135
    AddComplexInstrumentRequest = 10301
    AddComplexInstrumentResponse = 10302
    MMParameterDefinitionRequest = 10303
    MMParameterDefinitionResponse = 10304
    InquireMMParameterRequest = 10305
    InquireMMParameterResponse = 10306
    TradingSessionStatusBroadcast = 10307
    DeleteAllOrderQuoteEventBroadcast = 10308
    AddFlexibleInstrumentRequest = 10309
    AddFlexibleInstrumentResponse = 10310
    InquirePreTradeRiskLimitsRequest = 10311
    PreTradeRiskLimitsDefinitionRequest = 10312
    PreTradeRiskLimitResponse = 10313
    PingRequest = 10320
    PingResponse = 10321
    RFQRequest = 10401
    RFQResponse = 10402
    QuoteActivationRequest = 10403
    QuoteActivationResponse = 10404
    MassQuoteRequest = 10405
    MassQuoteResponse = 10406
    QuoteExecutionReport = 10407
    DeleteAllQuoteRequest = 10408
    DeleteAllQuoteResponse = 10409
    DeleteAllQuoteBroadcast = 10410
    QuoteActivationNotification = 10411
    TradeBroadcast = 10500
    TMTradingSessionStatusBroadcast = 10501
    EnterTESTradeRequest = 10600
    ModifyTESTradeRequest = 10601
    DeleteTESTradeRequest = 10602
    ApproveTESTradeRequest = 10603
    TESBroadcast = 10604
    TESDeleteBroadcast = 10606
    TESApproveBroadcast = 10607
    TESExecutionBroadcast = 10610
    TESResponse = 10611
    UploadTESTradeRequest = 10612
    TESUploadBroadcast = 10613
    TESTradeBroadcast = 10614
    TESTradingSessionStatusBroadcast = 10615
    TESCompressionRunStatusRequest = 10616
    TESCompressionRunStatusResponse = 10617
    TESCompressionRunStatusBroadcast = 10618
    EnterBasketTradeRequest = 10620
    ModifyBasketTradeRequest = 10621
    DeleteBasketTradeRequest = 10622
    ApproveBasketTradeRequest = 10623
    BasketResponse = 10624
    BasketBroadcast = 10625
    BasketDeleteBroadcast = 10626
    BasketApproveBroadcast = 10627
    BasketExecutionBroadcast = 10628
    AmendBasketTradeRequest = 10629
    ReverseTESTradeRequest = 10630
    ApproveReverseTESTradeRequest = 10631
    TESReversalBroadcast = 10632
    SRQSOpenNegotiationRequest = 10700
    SRQSUpdateNegotiationRequest = 10701
    SRQSEnterQuoteRequest = 10702
    SRQSQuoteResponse = 10703
    SRQSHitQuoteRequest = 10704
    SRQSDealResponse = 10705
    SRQSUpdateDealStatusRequest = 10706
    SRQSQuoteNotification = 10707
    SRQSCreateDealNotification = 10708
    SRQSDealNotification = 10709
    SRQSOpenNegotiationRequesterNotification = 10710
    SRQSOpenNegotiationNotification = 10711
    SRQSNegotiationRequesterNotification = 10712
    SRQSNegotiationNotification = 10713
    SRQSStatusBroadcast = 10714
    SRQSNegotiationStatusNotification = 10715
    SRQSQuotingStatusRequest = 10717
    SRQSInquireSmartRespondentRequest = 10718
    SRQSInquireSmartRespondentResponse = 10719

class ApplID(IntEnum):
    TRADE = 1
    NEWS = 2
    SERVICE_AVAILABILITY = 3
    SESSION_DATA = 4
    LISTENER_DATA = 5
    RISKCONTROL = 6
    TES_MAINTENANCE = 7
    TES_TRADE = 8
    SRQS_MAINTENANCE = 9
    SERVICE_AVAILABILITY_MARKET = 10
    NO_VALUE = 0xFF

class ApplIDStatus(IntEnum):
    OUTBOUND_CONVERSION_ERROR = 105
    NO_VALUE = 0xFFFFFFFF

class ApplResendFlag(IntEnum):
    FALSE = 0
    TRUE = 1
    NO_VALUE = 0xFF

class ApplSeqIndicator(IntEnum):
    NO_RECOVERY_REQUIRED = 0
    RECOVERY_REQUIRED = 1
    NO_VALUE = 0xFF

class ApplSeqStatus(IntEnum):
    UNAVAILABLE = 0
    AVAILABLE = 1
    NO_VALUE = 0xFF

class ApplUsageOrders(IntEnum):
    AUTOMATED = ord('A')
    AUTOSELECT = ord('B')
    MANUAL = ord('M')
    NONE = ord('N')
    NO_VALUE = 0

class ApplUsageQuotes(IntEnum):
    AUTOMATED = ord('A')
    AUTOSELECT = ord('B')
    MANUAL = ord('M')
    NONE = ord('N')
    NO_VALUE = 0

class BasketTradeReportType(IntEnum):
    SUBMIT = 0
    ADDENDUM = 4
    NO_WAS_SUBSTITUE = 5
    NO_VALUE = 0xFF

class BidPxIsLocked(IntEnum):
    NO = 0
    YES = 1
    NO_VALUE = 0xFF

class CompressionAction(IntEnum):
    START_COMPRESSION = 1
    COMMIT_COMPRESSION = 2
    CANCEL_COMPRESSION = 3
    NO_VALUE = 0xFF

class CompressionStatus(IntEnum):
    OPEN = 1
    EXECUTED = 2
    CANCELLED_BY_USER = 3
    CANCELLED_BY_SYSTEM = 4
    NO_VALUE = 0xFF

class CrossedIndicator(IntEnum):
    NO_CROSSING = 0
    CROSS_REJECTED = 1
    NO_VALUE = 0xFF

class CustOrderHandlingInst(IntEnum):
    C = ord('C')
    D = ord('D')
    G = ord('G')
    H = ord('H')
    W = ord('W')
    Y = ord('Y')
    NO_VALUE = 0

class DeleteReason(IntEnum):
    NO_SPECIAL_REASON = 100
    TAS_CHANGE = 101
    INTRADAY_EXPIRATION = 102
    RISK_EVENT = 103
    STOP_TRADING = 104
    INSTRUMENT_DELETION = 105
    INSTRUMENT_SUSPENSION = 106
    PRETRADE_RISK_EVENT = 107
    AMENDMENT_RESET = 108
    AMENDMENT_USER_CANCELLED = 109
    COMPRESSION_CANCELLED_BY_USER = 110
    COMPRESSION_CANCELLED_BY_SYSTEM = 111
    NO_VALUE = 0xFF

class EffectOnBasket(IntEnum):
    ADD_VOLUME = 1
    REMOVE_VOLUME = 2
    NO_VALUE = 0xFF

class EnlightRFQAvgRespRateRanking(IntEnum):
    LOW = 1
    MEDIUM = 2
    HIGH = 3
    NO_VALUE = 0xFF

class EnlightRFQAvgRespTimeRanking(IntEnum):
    LOW = 1
    MEDIUM = 2
    HIGH = 3
    NO_VALUE = 0xFF

class EurexVolumeRanking(IntEnum):
    LOW = 1
    MEDIUM = 2
    HIGH = 3
    NO_VALUE = 0xFF

class EventType(IntEnum):
    SWAP_START_DATE = 8
    SWAP_END_DATE = 9
    NO_VALUE = 0xFF

class ExecInst(IntEnum):
    H = 1
    Q = 2
    H_Q = 3
    H_6 = 5
    Q_6 = 6
    NO_VALUE = 0xFF

class ExecRestatementReason(IntEnum):
    ORDER_BOOK_RESTATEMENT = 1
    ORDER_ADDED = 101
    ORDER_MODIFIED = 102
    ORDER_CANCELLED = 103
    IOC_ORDER_CANCELLED = 105
    BOOK_ORDER_EXECUTED = 108
    CHANGED_TO_IOC = 114
    INSTRUMENT_STATE_CHANGE = 122
    MARKET_ORDER_TRIGGERED = 135
    CAO_ORDER_ACTIVATED = 149
    CAO_ORDER_INACTIVATED = 150
    OCO_ORDER_TRIGGERED = 164
    STOP_ORDER_TRIGGERED = 172
    OWNERSHIP_CHANGED = 181
    ORDER_CANCELLATION_PENDING = 197
    PENDING_CANCELLATION_EXECUTED = 199
    BOC_ORDER_CANCELLED = 212
    PANIC_CANCEL = 261
    MARKET_ORDER_UNCROSSING = 302
    CLIP_EXECUTION = 340
    CLIP_ARRANGEMENT_TIME_OUT = 343
    CLIP_ARRANGEMENT_VALIDATION = 344
    NO_VALUE = 0xFFFF

class ExecType(IntEnum):
    NEW = ord('0')
    CANCELED = ord('4')
    REPLACED = ord('5')
    PENDING_CANCEL_E = ord('6')
    SUSPENDED = ord('9')
    RESTATED = ord('D')
    TRADE = ord('F')
    TRIGGERED = ord('L')
    NO_VALUE = 0

class ExecutingTraderQualifier(IntEnum):
    ALGO = 22
    HUMAN = 24
    NO_VALUE = 0xFF

class ExerciseStyle(IntEnum):
    EUROPEAN = 0
    AMERICAN = 1
    NO_VALUE = 0xFF

class FillLiquidityInd(IntEnum):
    ADDED_LIQUIDITY = 1
    REMOVED_LIQUIDITY = 2
    AUCTION = 4
    TRIGGERED_STOP_ORDER = 5
    TRIGGERED_OCO_ORDER = 6
    TRIGGERED_MARKET_ORDER = 7
    NO_VALUE = 0xFF

class FreeText5DisclosureInstruction(IntEnum):
    NO = 0
    YES = 1
    NO_VALUE = 0xFF

class GatewayStatus(IntEnum):
    STANDBY = 0
    ACTIVE = 1
    NO_VALUE = 0xFF

class HedgeType(IntEnum):
    DURATION_HEDGE = 0
    NOMINAL_HEDGE = 1
    PRICE_FACTOR_HEDGE = 2
    NO_VALUE = 0xFF

class HedgingInstruction(IntEnum):
    ON_CLOSE = 1
    NO_VALUE = 0xFF

class ImpliedMarketIndicator(IntEnum):
    NOT_IMPLIED = 0
    IMPLIED_IN_OUT = 3
    NO_VALUE = 0xFF

class InputSource(IntEnum):
    CLIENT_BROKER = 1
    PROPRIETARY_BROKER = 2
    NO_VALUE = 0xFF

class InstrAttribType(IntEnum):
    VARIABLE_RATE = 5
    COUPON_RATE = 100
    OFFSET_TO_THE_VARIABLE_COUPON_RATE = 101
    SWAP_CUSTOMER_1 = 102
    SWAP_CUSTOMER_2 = 103
    CASH_BASKET_REFERENCE = 104
    NO_VALUE = 0xFF

class LastFragment(IntEnum):
    NOT_LAST_MESSAGE = 0
    LAST_MESSAGE = 1
    NO_VALUE = 0xFF

class LastMkt(IntEnum):
    XEUR = 1
    XEEE = 2
    NODX = 12
    NO_VALUE = 0xFFFF

class LastPxDisclosureInstruction(IntEnum):
    NO = 0
    YES = 1
    NO_VALUE = 0xFF

class LastQtyDisclosureInstruction(IntEnum):
    NO = 0
    YES = 1
    NO_VALUE = 0xFF

class LeavesQtyDisclosureInstruction(IntEnum):
    NO = 0
    YES = 1
    NO_VALUE = 0xFF

class LegInputSource(IntEnum):
    CLIENT_BROKER = 1
    PROPRIETARY_BROKER = 2
    NO_VALUE = 0xFF

class LegPositionEffect(IntEnum):
    CLOSE = ord('C')
    OPEN = ord('O')
    NO_VALUE = 0

class LegSecurityType(IntEnum):
    MULTILEG_INSTRUMENT = 1
    UNDERLYING_LEG = 2
    NO_VALUE = 0xFF

class LegSide(IntEnum):
    BUY = 1
    SELL = 2
    NO_VALUE = 0xFF

class ListUpdateAction(IntEnum):
    ADD = ord('A')
    DELETE = ord('D')
    NO_VALUE = 0

class MDBookType(IntEnum):
    TOPOFBOOK = 1
    PRICEDEPTH = 2
    NO_VALUE = 0xFF

class MDSubBookType(IntEnum):
    IMPLIED = 1
    VOLUMEWEIGHTEDAVERAGE = 2
    NO_VALUE = 0xFF

class MarketID(IntEnum):
    XEUR = 1
    XEEE = 2
    NODX = 12
    NO_VALUE = 0xFFFF

class MassActionReason(IntEnum):
    NO_SPECIAL_REASON = 0
    STOP_TRADING = 1
    EMERGENCY = 2
    MARKET_MAKER_PROTECTION = 3
    SESSION_LOSS = 6
    DUPLICATE_SESSION_LOGIN = 7
    CLEARING_RISK_CONTROL = 8
    INTERNAL_CONNECTION_LOSS = 100
    PRODUCT_STATE_HALT = 105
    PRODUCT_STATE_HOLIDAY = 106
    INSTRUMENT_SUSPENDED = 107
    COMPLEX_INSTRUMENT_DELETION = 109
    VOLATILITY_INTERRUPTION = 110
    PRODUCT_TEMPORARILY_NOT_TRADEABLE = 111
    MEMBER_DISABLE = 117
    NO_VALUE = 0xFF

class MassActionSubType(IntEnum):
    BOOK_OR_CANCEL = 1
    NO_VALUE = 0xFF

class MassActionType(IntEnum):
    SUSPEND_QUOTES = 1
    RELEASE_QUOTES = 2
    NO_VALUE = 0xFF

class MatchSubType(IntEnum):
    OPENING_AUCTION = 1
    CLOSING_AUCTION = 2
    INTRADAY_AUCTION = 3
    CIRCUIT_BREAKER_AUCTION = 4
    OUTSIDE_BBO = 6
    NO_VALUE = 0xFF

class MatchType(IntEnum):
    CONFIRMED_TRADE_REPORT = 3
    AUTO_MATCH_INCOMING = 4
    CROSS_AUCTION = 5
    CALL_AUCTION = 7
    AUTO_MATCH_RESTING = 11
    LIQUIDITY_IMPROVEMENT_CROSS = 13
    NO_VALUE = 0xFF

class MatchingEngineStatus(IntEnum):
    UNAVAILABLE = 0
    AVAILABLE = 1
    NO_VALUE = 0xFF

class MessageEventSource(IntEnum):
    BROADCAST_TO_APPROVER = ord('A')
    BROADCAST_TO_INITIATOR = ord('I')
    BROADCAST_TO_QUOTE_SUBMITTER = ord('Q')
    BROADCAST_TO_REQUESTER = ord('R')
    NO_VALUE = 0

class MultiLegReportingType(IntEnum):
    SINGLE_SECURITY = 1
    INDIVIDUAL_LEG_OF_A_MULTILEG_SECURITY = 2
    NO_VALUE = 0xFF

class MultilegModel(IntEnum):
    PREDEFINED_MULTILEG_SECURITY = 0
    USER_DEFINED_MULTLEG = 1
    NO_VALUE = 0xFF

class MultilegPriceModel(IntEnum):
    STANDARD = 0
    USERDEFINED = 1
    NO_VALUE = 0xFF

class NumberOfRespDisclosureInstruction(IntEnum):
    NO = 0
    YES = 1
    NO_VALUE = 0xFF

class OfferPxIsLocked(IntEnum):
    NO = 0
    YES = 1
    NO_VALUE = 0xFF

class OrdStatus(IntEnum):
    NEW = ord('0')
    PARTIALLY_FILLED = ord('1')
    FILLED = ord('2')
    CANCELED = ord('4')
    PENDING_CANCEL = ord('6')
    SUSPENDED = ord('9')
    NO_VALUE = 0

class OrdType(IntEnum):
    MARKET = 1
    LIMIT = 2
    STOP = 3
    STOP_LIMIT = 4
    NO_VALUE = 0xFF

class OrderAttributeLiquidityProvision(IntEnum):
    N = 0
    Y = 1
    NO_VALUE = 0xFF

class OrderAttributeRiskReduction(IntEnum):
    N = 0
    Y = 1
    NO_VALUE = 0xFF

class OrderCategory(IntEnum):
    ORDER = ord('1')
    QUOTE = ord('2')
    NO_VALUE = 0

class OrderEventReason(IntEnum):
    SMP = 100
    NO_VALUE = 0xFF

class OrderOrigination(IntEnum):
    DIRECT_ACCESS_OR_SPONSORED_ACCESS_CUSTOMER = 5
    NO_VALUE = 0xFF

class OrderQtyDisclosureInstruction(IntEnum):
    NO = 0
    YES = 1
    NO_VALUE = 0xFF

class OrderQtyIsLocked(IntEnum):
    NO = 0
    YES = 1
    NO_VALUE = 0xFF

class OrderRoutingIndicator(IntEnum):
    NO = ord('N')
    YES = ord('Y')
    NO_VALUE = 0

class OrderSide(IntEnum):
    BUY = 1
    SELL = 2
    NO_VALUE = 0xFF

class OwnershipIndicator(IntEnum):
    NO_CHANGE_OF_OWNERSHIP = 0
    CHANGE_TO_EXECUTING_TRADER = 1
    NO_VALUE = 0xFF

class PartyActionType(IntEnum):
    HALT_TRADING = 1
    REINSTATE = 2
    NO_VALUE = 0xFF

class PartyDetailRoleQualifier(IntEnum):
    TRADER = 10
    HEAD_TRADER = 11
    SUPERVISOR = 12
    NO_VALUE = 0xFF

class PartyDetailStatus(IntEnum):
    ACTIVE = 0
    SUSPEND = 1
    REJECTED = 2
    NO_VALUE = 0xFF

class PartyDetailStatusInformation(IntEnum):
    TRR_THRESHOLD_TOO_BIG = 1
    BLOCK_ALL_ANONYMOUS = 2
    NO_VALUE = 0xFF

class PartyIDEnteringFirm(IntEnum):
    PARTICIPANT = 1
    MARKETSUPERVISION = 2
    NO_VALUE = 0xFF

class PartyIDOriginationMarket(IntEnum):
    XKFE = 1
    NO_VALUE = 0xFF

class PartyIDSettlementLocation(IntEnum):
    CLEARSTREM_BANKING_FRANKFURT = 1
    CLEARSTREM_BANKING_LUXEMBURG = 2
    CLS_GROUP = 3
    EUROCLEAR = 4
    NO_VALUE = 0xFF

class PartyIdInvestmentDecisionMakerQualifier(IntEnum):
    ALGO = 22
    HUMAN = 24
    NO_VALUE = 0xFF

class PartyOrderOriginationDisclosureInstruction(IntEnum):
    NO = 0
    YES = 1
    NO_VALUE = 0xFF

class PartySubIDType(IntEnum):
    BUYER = 14001
    SELLER = 14002
    NO_VALUE = 0xFFFF

class PositionEffect(IntEnum):
    CLOSE = ord('C')
    OPEN = ord('O')
    NO_VALUE = 0

class PriceDisclosureInstruction(IntEnum):
    NO = 0
    YES = 1
    NO_VALUE = 0xFF

class PriceValidityCheckType(IntEnum):
    NONE = 0
    OPTIONAL = 1
    MANDATORY = 2
    NO_VALUE = 0xFF

class ProductComplex(IntEnum):
    SIMPLE_INSTRUMENT = 1
    STANDARD_OPTION_STRATEGY = 2
    NON_STANDARD_OPTION_STRATEGY = 3
    VOLATILITY_STRATEGY = 4
    FUTURES_SPREAD = 5
    INTER_PRODUCT_SPREAD = 6
    STANDARD_FUTURE_STRATEGY = 7
    PACK_AND_BUNDLE = 8
    STRIP = 9
    FLEXIBLE_SIMPLE_INSTRUMENT = 10
    NO_VALUE = 0xFF

class PutOrCall(IntEnum):
    PUT = 0
    CALL = 1
    NO_VALUE = 0xFF

class QuoteCancelReason(IntEnum):
    EXPIRED = 5
    NO_VALUE = 0xFF

class QuoteCancelType(IntEnum):
    CANCEL_ALL_QUOTES = 4
    NO_VALUE = 0xFF

class QuoteCondition(IntEnum):
    EXPIRED = ord('8')
    ACTIVE = ord('A')
    CLOSED = ord('B')
    SUSPENDED = ord('z')
    NO_VALUE = 0

class QuoteEntryRejectReason(IntEnum):
    UNKNOWN_SECURITY = 1
    DUPLICATE_QUOTE = 6
    INVALID_PRICE = 8
    NO_REFERENCE_PRICE_AVAILABLE = 16
    NO_SINGLE_SIDED_QUOTES = 100
    INVALID_QUOTING_MODEL = 103
    INVALID_SIZE = 106
    INVALID_UNDERLYING_PRICE = 107
    BID_PRICE_NOT_REASONABLE = 108
    ASK_PRICE_NOT_REASONABLE = 109
    BID_PRICE_EXCEEDS_RANGE = 110
    ASK_PRICE_EXCEEDS_RANGE = 111
    INSTRUMENT_STATE_FREEZE = 115
    DELETION_ALREADY_PENDING = 116
    ENTITLEMENT_NOT_ASSIGNED_FOR_UNDERLYING = 119
    CURRENTLY_NOT_TRADEABLE_ON_BOOK = 124
    QUANTITY_LIMIT_EXCEEDED = 125
    VALUE_LIMIT_EXCEEDED = 126
    INVALID_QUOTE_SPREAD = 127
    BOOK_OR_CANCEL = 128
    CANT_PROC_IN_CURR_INSTR_STATE = 131
    INVALID_QUOTE_TYPE = 134
    TRADING_INDICATION_RUNNING_FOR_TRADER = 143
    ON_BOOK_TRADING_DISABLED_FOR_INSTRUMENT_TYPE = 144
    LIQUIDITY_PROVIDER_PROTECTION_BID_SIDE_CANCELLED = 147
    LIQUIDITY_PROVIDER_PROTECTION_ASK_SIDE_CANCELLED = 148
    OUTSIDE_QUOTING_PERIOD = 155
    MATCH_PRICE_NOT_ON_PRICE_STEP = 156
    QUANTITY_LIMIT_EXCEEDS_TSL = 161
    TOO_MANY_ORDERS_AND_QUOTES_IN_ORDER_BOOK = 163
    CONTRACT_CANNOT_BE_TRADED_DUE_TO_INSUFFICIENT_ELIGIBILITY = 166
    UNDERLYING_PRICE_TIMEOUT = 167
    NO_VALUE = 0xFFFFFFFF

class QuoteEntryStatus(IntEnum):
    ACCEPTED = 0
    REJECTED = 5
    REMOVED_AND_REJECTED = 6
    PENDING = 10
    NO_VALUE = 0xFF

class QuoteEventLiquidityInd(IntEnum):
    ADDED_LIQUIDITY = 1
    REMOVED_LIQUIDITY = 2
    AUCTION = 4
    NO_VALUE = 0xFF

class QuoteEventReason(IntEnum):
    PENDING_CANCELLATION_EXECUTED = 14
    INVALID_PRICE = 15
    CROSS_REJECTED = 16
    BOOK_OR_CANCEL = 17
    PLP = 18
    NO_VALUE = 0xFF

class QuoteEventSide(IntEnum):
    BUY = 1
    SELL = 2
    NO_VALUE = 0xFF

class QuoteEventType(IntEnum):
    MODIFIED_QUOTE_SIDE = 2
    REMOVED_QUOTE_SIDE = 3
    PARTIALLY_FILLED = 4
    FILLED = 5
    REMOVED_QUANTITY = 6
    NO_VALUE = 0xFF

class QuoteInstruction(IntEnum):
    DO_NOT_QUOTE = 0
    QUOTE = 1
    NO_VALUE = 0xFF

class QuoteSizeType(IntEnum):
    TOTALSIZE = 1
    OPENSIZE = 2
    NO_VALUE = 0xFF

class QuoteSubType(IntEnum):
    WORKINGDELTA = 1
    BASISTRADE = 2
    REGULAR = 3
    NEGOTIATEUNDERLYINGOUTSIDEEXCHANGE = 4
    VOLASTRATEGYFIX = 5
    VOLASTRATEGYNEGOTIATEUNDERLYING = 6
    NO_VALUE = 0xFF

class QuoteType(IntEnum):
    INDICATIVE = 0
    TRADEABLE = 1
    TRADEABLE_BOC = 100
    NO_VALUE = 0xFF

class QuotingStatus(IntEnum):
    OPEN_ACTIVE = 1
    OPEN_IDLE = 2
    CLOSED_INACTIVE = 3
    NO_VALUE = 0xFF

class RefApplID(IntEnum):
    TRADE = 1
    NEWS = 2
    SERVICE_AVAILABILITY = 3
    SESSION_DATA = 4
    LISTENER_DATA = 5
    RISKCONTROL = 6
    TES_MAINTENANCE = 7
    TES_TRADE = 8
    SRQS_MAINTENANCE = 9
    SERVICE_AVAILABILITY_MARKET = 10
    NO_VALUE = 0xFF

class RelatedProductComplex(IntEnum):
    STANDARD_OPTION_STRATEGY = 2
    NON_STANDARD_OPTION_STRATEGY = 3
    VOLATILITY_STRATEGY = 4
    FUTURES_SPREAD = 5
    INTER_PRODUCT_SPREAD = 6
    STANDARD_FUTURE_STRATEGY = 7
    PACK_AND_BUNDLE = 8
    STRIP = 9
    NO_VALUE = 0xFF

class RequestingPartyIDEnteringFirm(IntEnum):
    PARTICIPANT = 1
    MARKETSUPERVISION = 2
    NO_VALUE = 0xFF

class RequestingPartyIDExecutingSystem(IntEnum):
    EUREXCLEARING = 1
    T7 = 2
    NO_VALUE = 0xFFFFFFFF

class RequestingPartySubIDType(IntEnum):
    REQUESTER = 5000
    RESPONDER = 5001
    BOTH = 5002
    SYSTEM = 5003
    NO_VALUE = 0xFFFF

class RespondentType(IntEnum):
    ALLMARKETPARTICIPANTS = 1
    ANONYMOUS = 102
    NO_VALUE = 0xFF

class ReversalCancellationReason(IntEnum):
    TAS_CHANGE = 1
    INTRADAY_EXPIRATION = 2
    INSTRUMENT_DELETION = 3
    INSTRUMENT_SUSPENSION = 4
    NO_VALUE = 0xFF

class ReversalIndicator(IntEnum):
    NO = 0
    YES = 1
    NO_VALUE = 0xFF

class RiskLimitAction(IntEnum):
    QUEUEINBOUND = 0
    REJECT = 2
    WARNING = 4
    NO_VALUE = 0xFF

class RiskLimitPlatform(IntEnum):
    ON_BOOK = 0
    OFF_BOOK = 1
    NO_VALUE = 0xFF

class RiskLimitRequestingPartyRole(IntEnum):
    CLEARING_FIRM = 4
    EXCHANGE = 22
    EXECUTING_UNIT = 59
    NO_VALUE = 0xFF

class RiskLimitType(IntEnum):
    LONG_LIMIT = 4
    SHORT_LIMIT = 5
    NO_VALUE = 0xFF

class RiskLimitViolationIndicator(IntEnum):
    NO = 0
    YES = 1
    NO_VALUE = 0xFF

class RootPartyIDInvestmentDecisionMakerQualifier(IntEnum):
    ALGO = 22
    HUMAN = 24
    NO_VALUE = 0xFF

class RootPartySubIDType(IntEnum):
    BUYER = 4001
    SELLER = 4002
    BROKER = 4003
    NO_VALUE = 0xFFFF

class SecondaryGatewayStatus(IntEnum):
    STANDBY = 0
    ACTIVE = 1
    NO_VALUE = 0xFF

class SelectiveRequestForQuoteRtmServiceStatus(IntEnum):
    UNAVAILABLE = 0
    AVAILABLE = 1
    NO_VALUE = 0xFF

class SelectiveRequestForQuoteServiceStatus(IntEnum):
    UNAVAILABLE = 0
    AVAILABLE = 1
    NO_VALUE = 0xFF

class SessionMode(IntEnum):
    ETI_HF = 1
    ETI_LF = 2
    GUI = 3
    FIX_LF = 4
    NO_VALUE = 0xFF

class SessionRejectReason(IntEnum):
    REQUIRED_TAG_MISSING = 1
    VALUE_IS_INCORRECT = 5
    DECRYPTION_PROBLEM = 7
    INVALID_MSGID = 11
    INCORRECT_NUMINGROUP_COUNT = 16
    OTHER = 99
    THROTTLE_LIMIT_EXCEEDED = 100
    EXPOSURE_LIMIT_EXCEEDED = 101
    SERVICE_TEMPORARILY_NOT_AVAILABLE = 102
    SERVICE_NOT_AVAILABLE = 103
    OUTBOUND_CONVERSION_ERROR = 105
    HEARTBEAT_VIOLATION = 152
    INTERNAL_TECHNICAL_ERROR = 200
    VALIDATION_ERROR = 210
    USER_ALREADY_LOGGED_IN = 211
    GATEWAY_IS_STANDBY = 216
    SESSION_LOGIN_LIMIT_REACHED = 217
    USER_ENTITLEMENT_DATA_TIMEOUT = 223
    PSGATEWAY_SESSION_LIMIT_REACHED = 224
    USER_LOGIN_LIMIT_REACHED = 225
    OUTSTANDING_LOGINS_BU_LIMIT_REACHED = 226
    OUTSTANDING_LOGINS_SESSION_LIMIT_REACHED = 227
    ORDER_NOT_FOUND = 10000
    PRICE_NOT_REASONABLE = 10001
    CLIENTORDERID_NOT_UNIQUE = 10002
    QUOTE_ACTIVATION_IN_PROGRESS = 10003
    STOP_BID_PRICE_NOT_REASONABLE = 10006
    STOP_ASK_PRICE_NOT_REASONABLE = 10007
    ORDER_NOT_EXECUTABLE_WITHIN_VALIDITY = 10008
    CREATE_CI_THROTTLE_EXCEEDED = 10010
    TRANSACTION_NOT_ALLOWED_IN_CURRENT_STATE = 10011
    NO_VALUE = 0xFFFFFFFF

class SessionStatus(IntEnum):
    ACTIVE = 0
    LOGOUT = 4
    NO_VALUE = 0xFF

class SessionSubMode(IntEnum):
    REGULAR_TRADING_SESSION = 0
    REGULAR_BACK_OFFICE_SESSION = 2
    NO_VALUE = 0xFF

class SettlMethod(IntEnum):
    CASH_SETTLEMENT = ord('C')
    PHYSICAL_SETTLEMENT = ord('P')
    NO_VALUE = 0

class ShowLastDealOnClosure(IntEnum):
    NO = 0
    YES = 1
    NO_VALUE = 0xFF

class Side(IntEnum):
    BUY = 1
    SELL = 2
    NO_VALUE = 0xFF

class SideDisclosureInstruction(IntEnum):
    NO = 0
    YES = 1
    NO_VALUE = 0xFF

class SideIsLocked(IntEnum):
    NO = 0
    YES = 1
    NO_VALUE = 0xFF

class SideLiquidityInd(IntEnum):
    ADDED_LIQUIDITY = 1
    REMOVED_LIQUIDITY = 2
    AUCTION = 4
    NO_VALUE = 0xFF

class SideTrdSubTyp(IntEnum):
    BLOCK_TRADE = 2001
    TRADE_AT_MARKET = 2004
    NO_VALUE = 0xFFFF

class SkipValidations(IntEnum):
    FALSE = 0
    TRUE = 1
    NO_VALUE = 0xFF

class SwapClearer(IntEnum):
    ECAG = 0
    NON_ECAG = 1
    NO_VALUE = 0xFF

class T7EntryServiceRtmStatus(IntEnum):
    UNAVAILABLE = 0
    AVAILABLE = 1
    NO_VALUE = 0xFF

class T7EntryServiceStatus(IntEnum):
    UNAVAILABLE = 0
    AVAILABLE = 1
    NO_VALUE = 0xFF

class TimeInForce(IntEnum):
    DAY = 0
    GTC = 1
    IOC = 3
    GTD = 6
    NO_VALUE = 0xFF

class TradSesEvent(IntEnum):
    START_OF_SERVICE = 101
    MARKET_RESET = 102
    END_OF_RESTATEMENT = 103
    END_OF_DAY_SERVICE = 104
    SERVICE_RESUMED = 105
    NO_VALUE = 0xFF

class TradSesMode(IntEnum):
    TESTING = 1
    SIMULATED = 2
    PRODUCTION = 3
    ACCEPTANCE = 4
    DISASTER_RECOVERY = 5
    NO_VALUE = 0xFF

class TradeAggregationTransType(IntEnum):
    NEW = 0
    NO_VALUE = 0xFF

class TradeAllocStatus(IntEnum):
    PENDING = 1
    APPROVED = 2
    AUTO_APPROVED = 3
    UPLOADED = 4
    CANCELED = 5
    PENDING_EXECUTION = 6
    PENDING_REVERSAL = 7
    APPROVED_REVERSAL = 8
    REVERSED = 9
    CANCELLED_REVERSAL = 10
    NO_VALUE = 0xFF

class TradeManagerStatus(IntEnum):
    UNAVAILABLE = 0
    AVAILABLE = 1
    NO_VALUE = 0xFF

class TradePlatform(IntEnum):
    OFF_BOOK = 0
    ON_BOOK = 1
    NO_VALUE = 0xFF

class TradePublishIndicator(IntEnum):
    DO_NOT_PUBLISH_TRADE = 0
    PUBLISH_TRADE = 1
    DEFERRED_PUBLICATION = 2
    PUBLISHED = 3
    NO_VALUE = 0xFF

class TradeReportType(IntEnum):
    SUBMIT = 0
    ALLEGED = 1
    ACCEPT = 2
    DECLINE = 3
    NO_WAS_REPLACED = 5
    TRADE_REPORT_CANCEL = 6
    TRADE_BREAK = 7
    ALLEGED_NEW = 11
    ALLEGED_NO_WAS = 13
    NO_VALUE = 0xFF

class TradeRequestResult(IntEnum):
    CANCEL_PENDING = 100
    CANCEL_DECLINED = 101
    CANCEL_APPROVED = 102
    NO_VALUE = 0xFF

class TradeToQuoteRatioRanking(IntEnum):
    LOW = 1
    MEDIUM = 2
    HIGH = 3
    NO_VALUE = 0xFF

class TradingCapacity(IntEnum):
    CUSTOMER = 1
    PRINCIPAL = 5
    MARKET_MAKER = 6
    NO_VALUE = 0xFF

class TradingSessionSubID(IntEnum):
    CLOSING_AUCTION = 4
    NO_VALUE = 0xFF

class TransactionDelayIndicator(IntEnum):
    NOT_DELAYED = 0
    DELAYED = 1
    NO_VALUE = 0xFF

class TransferReason(IntEnum):
    OWNER = 1
    CLEARER = 2
    NO_VALUE = 0xFF

class TrdRptStatus(IntEnum):
    ACCEPTED = 0
    REJECTED = 1
    CANCELLED = 2
    PENDING_NEW = 4
    PENDING_CANCEL = 5
    TERMINATED = 7
    DEEMED_VERIFIED = 9
    NO_VALUE = 0xFF

class TrdType(IntEnum):
    BLOCK_TRADE = 1
    EXCHANGE_FOR_SWAP = 12
    COMPRESSION = 50
    VOLA_TRADE = 1000
    EFP_FIN_TRADE = 1001
    EFP_INDEX_FUTURES_TRADE = 1002
    TRADE_AT_MARKET = 1004
    ENLIGHT = 1006
    BLOCK_QTPIP = 1007
    BTRF = 1010
    EBB = 1011
    NO_VALUE = 0xFFFF

class Triggered(IntEnum):
    NOT_TRIGGERED = 0
    TRIGGERED_STOP = 1
    TRIGGERED_OCO = 2
    NO_VALUE = 0xFF

class UserStatus(IntEnum):
    USER_FORCED_LOGOUT = 7
    USER_STOPPED = 10
    USER_RELEASED = 11
    NO_VALUE = 0xFF

class ValueCheckTypeMinLotSize(IntEnum):
    DO_NOT_CHECK = 0
    CHECK = 1
    NO_VALUE = 0xFF

class ValueCheckTypeQuantity(IntEnum):
    DO_NOT_CHECK = 0
    CHECK = 1
    NO_VALUE = 0xFF

class ValueCheckTypeValue(IntEnum):
    DO_NOT_CHECK = 0
    CHECK = 1
    NO_VALUE = 0xFF

class AffectedOrderRequestsGrpComp(Packet):
    name = 'AffectedOrderRequestsGrpComp'
	# sizes = (8, 8)

    fields_desc = [
        LEIntField("AffectedOrderRequestID", 0),
        StrFixedLenField("Pad4", "0000", 4),
    ]


    def extract_padding(self, s):
        return '', s
	
class BasketExecGrpComp(Packet):
    name = 'BasketExecGrpComp'
	# sizes = (16, 16)

    fields_desc = [
        LEIntField("PackageID", 0),
        LESignedIntField("SideMarketSegmentID", 0),
        LEIntField("AllocID", 0),
        LEShortField("SideTrdSubTyp", 0),
        StrFixedLenField("Pad2", "00", 2),
    ]


    def extract_padding(self, s):
        return '', s
	
class BasketRootPartyGrpComp(Packet):
    name = 'BasketRootPartyGrpComp'
	# sizes = (40, 40)

    fields_desc = [
        LEShortField("RootPartySubIDType", 0),
        StrFixedLenField("RootPartyContraFirm", 0x00, 5),
        StrFixedLenField("RootPartyContraTrader", 0x00, 6),
        StrFixedLenField("BasketSideTradeReportID", 0x00, 20),
        StrFixedLenField("Pad7", "0000000", 7),
    ]


    def extract_padding(self, s):
        return '', s
	
class BasketSideAllocExtBCGrpComp(Packet):
    name = 'BasketSideAllocExtBCGrpComp'
	# sizes = (192, 192)

    fields_desc = [
        LESignedLongField("AllocQty", 0),
        LESignedLongField("SecurityID", 0),
        LESignedLongField("LastPx", 0),
        LELongField("TransBkdTime", 0),
        LESignedLongField("RelatedClosePrice", 0),
        LEIntField("PackageID", 0),
        LESignedIntField("SideMarketSegmentID", 0),
        LEIntField("AllocID", 0),
        LEShortField("SideTrdSubTyp", 0),
        LEShortField("PartySubIDType", 0),
        ByteField("Side", 0),
        ByteField("PositionEffect", 0),
        ByteField("EffectOnBasket", 0),
        ByteField("TradingCapacity", 0),
        ByteField("TradeAllocStatus", 0),
        ByteField("ProductComplex", 0),
        ByteField("TradePublishIndicator", 0),
        StrFixedLenField("PartyExecutingFirm", 0x00, 5),
        StrFixedLenField("PartyExecutingTrader", 0x00, 6),
        StrFixedLenField("Account", 0x00, 2),
        StrFixedLenField("FreeText1", 0x00, 12),
        StrFixedLenField("FreeText2", 0x00, 12),
        StrFixedLenField("FreeText3", 0x00, 12),
        StrFixedLenField("PartyIDTakeUpTradingFirm", 0x00, 5),
        StrFixedLenField("PartyIDOrderOriginationFirm", 0x00, 7),
        StrFixedLenField("PartyIDBeneficiary", 0x00, 9),
        StrFixedLenField("PartyIDPositionAccount", 0x00, 32),
        StrFixedLenField("PartyIDLocationID", 0x00, 2),
        ByteField("CustOrderHandlingInst", 0),
        StrFixedLenField("ComplianceText", 0x00, 20),
        StrFixedLenField("Pad4", "0000", 4),
    ]


    def extract_padding(self, s):
        return '', s
	
class BasketSideAllocExtGrpComp(Packet):
    name = 'BasketSideAllocExtGrpComp'
	# sizes = (184, 184)

    fields_desc = [
        LESignedLongField("AllocQty", 0),
        LELongField("PartyIDClientID", 0),
        LELongField("PartyIdInvestmentDecisionMaker", 0),
        LELongField("ExecutingTrader", 0),
        LEIntField("PackageID", 0),
        LESignedIntField("SideMarketSegmentID", 0),
        LEIntField("AllocID", 0),
        ByteField("Side", 0),
        ByteField("PositionEffect", 0),
        ByteField("TradingCapacity", 0),
        ByteField("OrderAttributeLiquidityProvision", 0),
        ByteField("ExecutingTraderQualifier", 0),
        ByteField("PartyIdInvestmentDecisionMakerQualifier", 0),
        ByteField("OrderAttributeRiskReduction", 0),
        ByteField("OrderOrigination", 0),
        StrFixedLenField("PartyExecutingFirm", 0x00, 5),
        StrFixedLenField("PartyExecutingTrader", 0x00, 6),
        StrFixedLenField("Account", 0x00, 2),
        StrFixedLenField("FreeText1", 0x00, 12),
        StrFixedLenField("FreeText2", 0x00, 12),
        StrFixedLenField("FreeText3", 0x00, 12),
        StrFixedLenField("PartyIDTakeUpTradingFirm", 0x00, 5),
        StrFixedLenField("PartyIDOrderOriginationFirm", 0x00, 7),
        StrFixedLenField("PartyIDBeneficiary", 0x00, 9),
        StrFixedLenField("PartyIDPositionAccount", 0x00, 32),
        StrFixedLenField("PartyIDLocationID", 0x00, 2),
        ByteField("CustOrderHandlingInst", 0),
        StrFixedLenField("ComplianceText", 0x00, 20),
        StrFixedLenField("Pad7", "0000000", 7),
    ]


    def extract_padding(self, s):
        return '', s
	
class BasketSideAllocGrpComp(Packet):
    name = 'BasketSideAllocGrpComp'
	# sizes = (32, 32)

    fields_desc = [
        LESignedLongField("AllocQty", 0),
        LEIntField("IndividualAllocID", 0),
        LEShortField("PartySubIDType", 0),
        ByteField("Side", 0),
        ByteField("InstrmtMatchSideID", 0),
        ByteField("TradeAllocStatus", 0),
        StrFixedLenField("PartyExecutingFirm", 0x00, 5),
        StrFixedLenField("PartyExecutingTrader", 0x00, 6),
        StrFixedLenField("Pad4", "0000", 4),
    ]


    def extract_padding(self, s):
        return '', s
	
class CrossRequestAckSideGrpComp(Packet):
    name = 'CrossRequestAckSideGrpComp'
	# sizes = (16, 16)

    fields_desc = [
        LELongField("OrderID", 0),
        ByteField("InputSource", 0),
        ByteField("Side", 0),
        StrFixedLenField("Pad6", "000000", 6),
    ]


    def extract_padding(self, s):
        return '', s
	
class CrossRequestSideGrpComp(Packet):
    name = 'CrossRequestSideGrpComp'
	# sizes = (160, 160)

    fields_desc = [
        LELongField("PartyIDClientID", 0),
        LELongField("PartyIdInvestmentDecisionMaker", 0),
        LELongField("ExecutingTrader", 0),
        LESignedLongField("MaximumPrice", 0),
        ByteField("InputSource", 0),
        ByteField("Side", 0),
        ByteField("TradingCapacity", 0),
        ByteField("ExecutingTraderQualifier", 0),
        ByteField("OrderAttributeLiquidityProvision", 0),
        ByteField("PartyIdInvestmentDecisionMakerQualifier", 0),
        ByteField("PositionEffect", 0),
        ByteField("CustOrderHandlingInst", 0),
        StrFixedLenField("Account", 0x00, 2),
        StrFixedLenField("PartyIDPositionAccount", 0x00, 32),
        StrFixedLenField("FreeText1", 0x00, 12),
        StrFixedLenField("FreeText2", 0x00, 12),
        StrFixedLenField("FreeText3", 0x00, 12),
        StrFixedLenField("PartyIDOrderOriginationFirm", 0x00, 7),
        StrFixedLenField("PartyIDBeneficiary", 0x00, 9),
        StrFixedLenField("PartyIDTakeUpTradingFirm", 0x00, 5),
        StrFixedLenField("SideComplianceText", 0x00, 20),
        StrFixedLenField("PartyIDLocationID", 0x00, 2),
        StrFixedLenField("Pad7", "0000000", 7),
    ]


    def extract_padding(self, s):
        return '', s
	
class EnrichmentRulesGrpComp(Packet):
    name = 'EnrichmentRulesGrpComp'
	# sizes = (64, 64)

    fields_desc = [
        LEShortField("EnrichmentRuleID", 0),
        ByteField("PartyIDOriginationMarket", 0),
        StrFixedLenField("Account", 0x00, 2),
        ByteField("PositionEffect", 0),
        StrFixedLenField("PartyIDTakeUpTradingFirm", 0x00, 5),
        StrFixedLenField("PartyIDOrderOriginationFirm", 0x00, 7),
        StrFixedLenField("PartyIDBeneficiary", 0x00, 9),
        StrFixedLenField("FreeText1", 0x00, 12),
        StrFixedLenField("FreeText2", 0x00, 12),
        StrFixedLenField("FreeText3", 0x00, 12),
        StrFixedLenField("Pad1", "0", 1),
    ]


    def extract_padding(self, s):
        return '', s
	
class FillsGrpComp(Packet):
    name = 'FillsGrpComp'
	# sizes = (32, 32)

    fields_desc = [
        LESignedLongField("FillPx", 0),
        LESignedLongField("FillQty", 0),
        LEIntField("FillMatchID", 0),
        LESignedIntField("FillExecID", 0),
        ByteField("FillLiquidityInd", 0),
        StrFixedLenField("Pad7", "0000000", 7),
    ]


    def extract_padding(self, s):
        return '', s
	
class InstrmntLegExecGrpComp(Packet):
    name = 'InstrmntLegExecGrpComp'
	# sizes = (32, 32)

    fields_desc = [
        LESignedLongField("LegSecurityID", 0),
        LESignedLongField("LegLastPx", 0),
        LESignedLongField("LegLastQty", 0),
        LESignedIntField("LegExecID", 0),
        ByteField("LegSide", 0),
        ByteField("FillRefID", 0),
        StrFixedLenField("Pad2", "00", 2),
    ]


    def extract_padding(self, s):
        return '', s
	
class InstrmtLegGrpComp(Packet):
    name = 'InstrmtLegGrpComp'
	# sizes = (32, 32)

    fields_desc = [
        LESignedLongField("LegSecurityID", 0),
        LESignedLongField("LegPrice", 0),
        LESignedIntField("LegSymbol", 0),
        LEIntField("LegRatioQty", 0),
        ByteField("LegSide", 0),
        ByteField("LegSecurityType", 0),
        StrFixedLenField("Pad6", "000000", 6),
    ]


    def extract_padding(self, s):
        return '', s
	
class InstrmtMatchSideGrpComp(Packet):
    name = 'InstrmtMatchSideGrpComp'
	# sizes = (72, 72)

    fields_desc = [
        LESignedLongField("SecurityID", 0),
        LESignedLongField("LastPx", 0),
        LELongField("TransBkdTime", 0),
        LESignedLongField("RelatedClosePrice", 0),
        LEIntField("PackageID", 0),
        LESignedIntField("SideMarketSegmentID", 0),
        LEShortField("SideTrdSubTyp", 0),
        ByteField("ProductComplex", 0),
        ByteField("TradePublishIndicator", 0),
        ByteField("InstrmtMatchSideID", 0),
        ByteField("EffectOnBasket", 0),
        StrFixedLenField("TradeReportText", 0x00, 20),
        StrFixedLenField("Pad6", "000000", 6),
    ]


    def extract_padding(self, s):
        return '', s
	
class InstrumentAttributeGrpComp(Packet):
    name = 'InstrumentAttributeGrpComp'
	# sizes = (40, 40)

    fields_desc = [
        ByteField("InstrAttribType", 0),
        StrFixedLenField("InstrAttribValue", 0x00, 32),
        StrFixedLenField("Pad7", "0000000", 7),
    ]


    def extract_padding(self, s):
        return '', s
	
class InstrumentEventGrpComp(Packet):
    name = 'InstrumentEventGrpComp'
	# sizes = (8, 8)

    fields_desc = [
        LEIntField("EventDate", 0),
        ByteField("EventType", 0),
        StrFixedLenField("Pad3", "000", 3),
    ]


    def extract_padding(self, s):
        return '', s
	
class LegOrdGrpComp(Packet):
    name = 'LegOrdGrpComp'
	# sizes = (8, 8)

    fields_desc = [
        StrFixedLenField("LegAccount", 0x00, 2),
        ByteField("LegPositionEffect", 0),
        StrFixedLenField("Pad5", "00000", 5),
    ]


    def extract_padding(self, s):
        return '', s
	
class MMParameterGrpComp(Packet):
    name = 'MMParameterGrpComp'
	# sizes = (40, 40)

    fields_desc = [
        LESignedLongField("ExposureDuration", 0),
        LESignedLongField("CumQty", 0),
        LESignedLongField("Delta", 0),
        LESignedLongField("Vega", 0),
        LESignedIntField("PctCount", 0),
        LEIntField("TargetPartyIDSessionID", 0),
    ]


    def extract_padding(self, s):
        return '', s
	
class MessageHeaderInComp(Packet):
    name = 'MessageHeaderInComp'
	# sizes = (16, 16)

    fields_desc = [
        LEIntField("BodyLen", 0),
        LEShortField("TemplateID", 0),
        StrFixedLenField("NetworkMsgID", 0x00, 8),
        StrFixedLenField("Pad2", "00", 2),
    ]


    def extract_padding(self, s):
        return '', s
	
class MessageHeaderOutComp(Packet):
    name = 'MessageHeaderOutComp'
	# sizes = (8, 8)

    fields_desc = [
        LEIntField("BodyLen", 0),
        LEShortField("TemplateID", 0),
        StrFixedLenField("Pad2", "00", 2),
    ]


    def extract_padding(self, s):
        return '', s
	
class NRBCHeaderComp(Packet):
    name = 'NRBCHeaderComp'
	# sizes = (16, 16)

    fields_desc = [
        LELongField("SendingTime", 0),
        LEIntField("ApplSubID", 0),
        ByteField("ApplID", 0),
        ByteField("LastFragment", 0),
        StrFixedLenField("Pad2", "00", 2),
    ]


    def extract_padding(self, s):
        return '', s
	
class NRResponseHeaderMEComp(Packet):
    name = 'NRResponseHeaderMEComp'
	# sizes = (48, 48)

    fields_desc = [
        LELongField("RequestTime", 0),
        LELongField("TrdRegTSTimeIn", 0),
        LELongField("TrdRegTSTimeOut", 0),
        LELongField("ResponseIn", 0),
        LELongField("SendingTime", 0),
        LEIntField("MsgSeqNum", 0),
        ByteField("LastFragment", 0),
        StrFixedLenField("Pad3", "000", 3),
    ]


    def extract_padding(self, s):
        return '', s
	
class NotAffectedOrdersGrpComp(Packet):
    name = 'NotAffectedOrdersGrpComp'
	# sizes = (16, 16)

    fields_desc = [
        LELongField("NotAffectedOrderID", 0),
        LELongField("NotAffOrigClOrdID", 0),
    ]


    def extract_padding(self, s):
        return '', s
	
class NotAffectedSecuritiesGrpComp(Packet):
    name = 'NotAffectedSecuritiesGrpComp'
	# sizes = (8, 8)

    fields_desc = [
        LELongField("NotAffectedSecurityID", 0),
    ]


    def extract_padding(self, s):
        return '', s
	
class NotifHeaderComp(Packet):
    name = 'NotifHeaderComp'
	# sizes = (8, 8)

    fields_desc = [
        LELongField("SendingTime", 0),
    ]


    def extract_padding(self, s):
        return '', s
	
class OrderBookItemGrpComp(Packet):
    name = 'OrderBookItemGrpComp'
	# sizes = (48, 48)

    fields_desc = [
        LESignedLongField("SecurityID", 0),
        LESignedLongField("BestBidPx", 0),
        LESignedLongField("BestBidSize", 0),
        LESignedLongField("BestOfferPx", 0),
        LESignedLongField("BestOfferSize", 0),
        ByteField("MDBookType", 0),
        ByteField("MDSubBookType", 0),
        StrFixedLenField("Pad6", "000000", 6),
    ]


    def extract_padding(self, s):
        return '', s
	
class OrderEventGrpComp(Packet):
    name = 'OrderEventGrpComp'
	# sizes = (24, 24)

    fields_desc = [
        LESignedLongField("OrderEventPx", 0),
        LESignedLongField("OrderEventQty", 0),
        LEIntField("OrderEventMatchID", 0),
        ByteField("OrderEventReason", 0),
        StrFixedLenField("Pad3", "000", 3),
    ]


    def extract_padding(self, s):
        return '', s
	
class PartyDetailsGrpComp(Packet):
    name = 'PartyDetailsGrpComp'
	# sizes = (16, 16)

    fields_desc = [
        LEIntField("PartyDetailIDExecutingTrader", 0),
        StrFixedLenField("PartyDetailExecutingTrader", 0x00, 6),
        ByteField("PartyDetailRoleQualifier", 0),
        ByteField("PartyDetailStatus", 0),
        StrFixedLenField("PartyDetailDeskID", 0x00, 3),
        StrFixedLenField("Pad1", "0", 1),
    ]


    def extract_padding(self, s):
        return '', s
	
class QuotReqLegsGrpComp(Packet):
    name = 'QuotReqLegsGrpComp'
	# sizes = (24, 24)

    fields_desc = [
        LESignedLongField("LegSecurityID", 0),
        LEIntField("LegRatioQty", 0),
        LESignedIntField("LegSymbol", 0),
        ByteField("LegSecurityType", 0),
        ByteField("LegSide", 0),
        StrFixedLenField("Pad6", "000000", 6),
    ]


    def extract_padding(self, s):
        return '', s
	
class QuoteEntryAckGrpComp(Packet):
    name = 'QuoteEntryAckGrpComp'
	# sizes = (24, 24)

    fields_desc = [
        LESignedLongField("SecurityID", 0),
        LESignedLongField("CxlSize", 0),
        LEIntField("QuoteEntryRejectReason", 0),
        ByteField("QuoteEntryStatus", 0),
        ByteField("Side", 0),
        StrFixedLenField("Pad2", "00", 2),
    ]


    def extract_padding(self, s):
        return '', s
	
class QuoteEntryGrpComp(Packet):
    name = 'QuoteEntryGrpComp'
	# sizes = (40, 40)

    fields_desc = [
        LESignedLongField("SecurityID", 0),
        LESignedLongField("BidPx", 0),
        LESignedLongField("BidSize", 0),
        LESignedLongField("OfferPx", 0),
        LESignedLongField("OfferSize", 0),
    ]


    def extract_padding(self, s):
        return '', s
	
class QuoteEventGrpComp(Packet):
    name = 'QuoteEventGrpComp'
	# sizes = (48, 48)

    fields_desc = [
        LESignedLongField("SecurityID", 0),
        LESignedLongField("QuoteEventPx", 0),
        LESignedLongField("QuoteEventQty", 0),
        LELongField("QuoteMsgID", 0),
        LEIntField("QuoteEventMatchID", 0),
        LESignedIntField("QuoteEventExecID", 0),
        ByteField("QuoteEventType", 0),
        ByteField("QuoteEventSide", 0),
        ByteField("QuoteEventLiquidityInd", 0),
        ByteField("QuoteEventReason", 0),
        StrFixedLenField("Pad4", "0000", 4),
    ]


    def extract_padding(self, s):
        return '', s
	
class QuoteLegExecGrpComp(Packet):
    name = 'QuoteLegExecGrpComp'
	# sizes = (32, 32)

    fields_desc = [
        LESignedLongField("LegSecurityID", 0),
        LESignedLongField("LegLastPx", 0),
        LESignedLongField("LegLastQty", 0),
        LESignedIntField("LegExecID", 0),
        ByteField("LegSide", 0),
        ByteField("NoQuoteEventsIndex", 0),
        StrFixedLenField("Pad2", "00", 2),
    ]


    def extract_padding(self, s):
        return '', s
	
class RBCHeaderComp(Packet):
    name = 'RBCHeaderComp'
	# sizes = (32, 32)

    fields_desc = [
        LELongField("SendingTime", 0),
        LELongField("ApplSeqNum", 0),
        LEIntField("ApplSubID", 0),
        LEShortField("PartitionID", 0),
        ByteField("ApplResendFlag", 0),
        ByteField("ApplID", 0),
        ByteField("LastFragment", 0),
        StrFixedLenField("Pad7", "0000000", 7),
    ]


    def extract_padding(self, s):
        return '', s
	
class RBCHeaderMEComp(Packet):
    name = 'RBCHeaderMEComp'
	# sizes = (56, 56)

    fields_desc = [
        LELongField("TrdRegTSTimeOut", 0),
        LELongField("NotificationIn", 0),
        LELongField("SendingTime", 0),
        LEIntField("ApplSubID", 0),
        LEShortField("PartitionID", 0),
        StrFixedLenField("ApplMsgID", 0x00000000000000000000000000000000, 16),
        ByteField("ApplID", 0),
        ByteField("ApplResendFlag", 0),
        ByteField("LastFragment", 0),
        StrFixedLenField("Pad7", "0000000", 7),
    ]


    def extract_padding(self, s):
        return '', s
	
class RequestHeaderComp(Packet):
    name = 'RequestHeaderComp'
	# sizes = (8, 8)

    fields_desc = [
        LEIntField("MsgSeqNum", 0),
        LEIntField("SenderSubID", 0),
    ]


    def extract_padding(self, s):
        return '', s
	
class ResponseHeaderComp(Packet):
    name = 'ResponseHeaderComp'
	# sizes = (24, 24)

    fields_desc = [
        LELongField("RequestTime", 0),
        LELongField("SendingTime", 0),
        LEIntField("MsgSeqNum", 0),
        StrFixedLenField("Pad4", "0000", 4),
    ]


    def extract_padding(self, s):
        return '', s
	
class ResponseHeaderMEComp(Packet):
    name = 'ResponseHeaderMEComp'
	# sizes = (64, 64)

    fields_desc = [
        LELongField("RequestTime", 0),
        LELongField("TrdRegTSTimeIn", 0),
        LELongField("TrdRegTSTimeOut", 0),
        LELongField("ResponseIn", 0),
        LELongField("SendingTime", 0),
        LEIntField("MsgSeqNum", 0),
        LEShortField("PartitionID", 0),
        ByteField("ApplID", 0),
        StrFixedLenField("ApplMsgID", 0x00000000000000000000000000000000, 16),
        ByteField("LastFragment", 0),
    ]


    def extract_padding(self, s):
        return '', s
	
class RiskLimitQtyGrpComp(Packet):
    name = 'RiskLimitQtyGrpComp'
	# sizes = (16, 16)

    fields_desc = [
        LESignedLongField("RiskLimitQty", 0),
        ByteField("RiskLimitType", 0),
        StrFixedLenField("Pad7", "0000000", 7),
    ]


    def extract_padding(self, s):
        return '', s
	
class RiskLimitsRptGrpComp(Packet):
    name = 'RiskLimitsRptGrpComp'
	# sizes = (40, 40)

    fields_desc = [
        LESignedLongField("RiskLimitQty", 0),
        LESignedLongField("RiskLimitOpenQty", 0),
        LESignedLongField("RiskLimitNetPositionQty", 0),
        LELongField("NettingCoefficient", 0),
        ByteField("RiskLimitType", 0),
        ByteField("RiskLimitRequestingPartyRole", 0),
        ByteField("RiskLimitViolationIndicator", 0),
        StrFixedLenField("RiskLimitGroup", 0x00, 3),
        StrFixedLenField("Pad2", "00", 2),
    ]


    def extract_padding(self, s):
        return '', s
	
class SRQSHitQuoteGrpComp(Packet):
    name = 'SRQSHitQuoteGrpComp'
	# sizes = (24, 24)

    fields_desc = [
        LESignedLongField("OrderQty", 0),
        LELongField("QuoteID", 0),
        ByteField("Side", 0),
        StrFixedLenField("Pad7", "0000000", 7),
    ]


    def extract_padding(self, s):
        return '', s
	
class SRQSQuoteGrpComp(Packet):
    name = 'SRQSQuoteGrpComp'
	# sizes = (8, 8)

    fields_desc = [
        LELongField("QuoteID", 0),
    ]


    def extract_padding(self, s):
        return '', s
	
class SRQSTargetPartyTrdGrpComp(Packet):
    name = 'SRQSTargetPartyTrdGrpComp'
	# sizes = (40, 40)

    fields_desc = [
        LESignedLongField("SideLastQty", 0),
        LELongField("QuoteID", 0),
        LEIntField("TargetPartyIDExecutingTrader", 0),
        StrFixedLenField("TargetPartyExecutingFirm", 0x00, 5),
        StrFixedLenField("TargetPartyExecutingTrader", 0x00, 6),
        StrFixedLenField("TargetPartyEnteringTrader", 0x00, 6),
        StrFixedLenField("Pad3", "000", 3),
    ]


    def extract_padding(self, s):
        return '', s
	
class SessionsGrpComp(Packet):
    name = 'SessionsGrpComp'
	# sizes = (8, 8)

    fields_desc = [
        LEIntField("PartyIDSessionID", 0),
        ByteField("SessionMode", 0),
        ByteField("SessionSubMode", 0),
        StrFixedLenField("Pad2", "00", 2),
    ]


    def extract_padding(self, s):
        return '', s
	
class SideAllocExtGrpComp(Packet):
    name = 'SideAllocExtGrpComp'
	# sizes = (176, 176)

    fields_desc = [
        LESignedLongField("AllocQty", 0),
        LELongField("PartyIDClientID", 0),
        LELongField("PartyIdInvestmentDecisionMaker", 0),
        LELongField("ExecutingTrader", 0),
        LEIntField("IndividualAllocID", 0),
        StrFixedLenField("PartyExecutingFirm", 0x00, 5),
        StrFixedLenField("PartyExecutingTrader", 0x00, 6),
        StrFixedLenField("Pad1", "0", 1),
        LEIntField("TESEnrichmentRuleID", 0),
        ByteField("Side", 0),
        ByteField("TradeAllocStatus", 0),
        ByteField("TradingCapacity", 0),
        ByteField("PositionEffect", 0),
        ByteField("OrderAttributeLiquidityProvision", 0),
        ByteField("ExecutingTraderQualifier", 0),
        ByteField("PartyIdInvestmentDecisionMakerQualifier", 0),
        ByteField("OrderAttributeRiskReduction", 0),
        ByteField("OrderOrigination", 0),
        StrFixedLenField("Account", 0x00, 2),
        StrFixedLenField("PartyIDPositionAccount", 0x00, 32),
        StrFixedLenField("PartyIDTakeUpTradingFirm", 0x00, 5),
        StrFixedLenField("FreeText1", 0x00, 12),
        StrFixedLenField("FreeText2", 0x00, 12),
        StrFixedLenField("FreeText3", 0x00, 12),
        StrFixedLenField("PartyIDOrderOriginationFirm", 0x00, 7),
        StrFixedLenField("PartyIDBeneficiary", 0x00, 9),
        StrFixedLenField("PartyIDLocationID", 0x00, 2),
        ByteField("CustOrderHandlingInst", 0),
        StrFixedLenField("ComplianceText", 0x00, 20),
        StrFixedLenField("Pad1_1", "0", 1),
    ]


    def extract_padding(self, s):
        return '', s
	
class SideAllocGrpComp(Packet):
    name = 'SideAllocGrpComp'
	# sizes = (32, 32)

    fields_desc = [
        LESignedLongField("AllocQty", 0),
        LEIntField("IndividualAllocID", 0),
        LEIntField("TESEnrichmentRuleID", 0),
        ByteField("Side", 0),
        StrFixedLenField("PartyExecutingFirm", 0x00, 5),
        StrFixedLenField("PartyExecutingTrader", 0x00, 6),
        StrFixedLenField("Pad4", "0000", 4),
    ]


    def extract_padding(self, s):
        return '', s
	
class SideAllocGrpBCComp(Packet):
    name = 'SideAllocGrpBCComp'
	# sizes = (40, 40)

    fields_desc = [
        LESignedLongField("AllocQty", 0),
        LELongField("ReversalApprovalTime", 0),
        LEIntField("IndividualAllocID", 0),
        LEIntField("TESEnrichmentRuleID", 0),
        StrFixedLenField("PartyExecutingFirm", 0x00, 5),
        StrFixedLenField("PartyExecutingTrader", 0x00, 6),
        ByteField("Side", 0),
        ByteField("TradeAllocStatus", 0),
        StrFixedLenField("Pad3", "000", 3),
    ]


    def extract_padding(self, s):
        return '', s
	
class SideCrossLegGrpComp(Packet):
    name = 'SideCrossLegGrpComp'
	# sizes = (8, 8)

    fields_desc = [
        ByteField("LegInputSource", 0),
        ByteField("LegPositionEffect", 0),
        StrFixedLenField("LegAccount", 0x00, 2),
        StrFixedLenField("Pad4", "0000", 4),
    ]


    def extract_padding(self, s):
        return '', s
	
class SmartPartyDetailGrpComp(Packet):
    name = 'SmartPartyDetailGrpComp'
	# sizes = (16, 16)

    fields_desc = [
        StrFixedLenField("PartyDetailExecutingUnit", 0x00, 5),
        StrFixedLenField("PartyDetailExecutingTrader", 0x00, 6),
        StrFixedLenField("Pad5", "00000", 5),
    ]


    def extract_padding(self, s):
        return '', s
	
class TargetPartiesComp(Packet):
    name = 'TargetPartiesComp'
	# sizes = (32, 32)

    fields_desc = [
        LEIntField("TargetPartyIDExecutingTrader", 0),
        ByteField("SideDisclosureInstruction", 0),
        ByteField("PriceDisclosureInstruction", 0),
        ByteField("LeavesQtyDisclosureInstruction", 0),
        ByteField("LastPxDisclosureInstruction", 0),
        ByteField("LastQtyDisclosureInstruction", 0),
        ByteField("FreeText5DisclosureInstruction", 0),
        ByteField("PartyOrderOriginationDisclosureInstruction", 0),
        ByteField("QuoteInstruction", 0),
        StrFixedLenField("TargetPartyExecutingFirm", 0x00, 5),
        StrFixedLenField("TargetPartyExecutingTrader", 0x00, 6),
        ByteField("PartyDetailStatus", 0),
        ByteField("PartyDetailStatusInformation", 0),
        StrFixedLenField("Pad7", "0000000", 7),
    ]


    def extract_padding(self, s):
        return '', s
	
class TrdInstrmntLegGrpComp(Packet):
    name = 'TrdInstrmntLegGrpComp'
	# sizes = (24, 24)

    fields_desc = [
        LESignedLongField("LegSecurityID", 0),
        LESignedLongField("LegPrice", 0),
        LESignedLongField("LegQty", 0),
    ]


    def extract_padding(self, s):
        return '', s
	
class UnderlyingStipGrpComp(Packet):
    name = 'UnderlyingStipGrpComp'
	# sizes = (40, 40)

    fields_desc = [
        StrFixedLenField("UnderlyingStipValue", 0x00, 32),
        StrFixedLenField("UnderlyingStipType", 0x00, 7),
        StrFixedLenField("Pad1", "0", 1),
    ]


    def extract_padding(self, s):
        return '', s
	
class AddComplexInstrumentRequest(Packet):
    name = 'AddComplexInstrumentRequest'
	# sizes = (56, 696)

    fields_desc = [
        PacketField("MessageHeaderIn", None, MessageHeaderInComp),
        PacketField("RequestHeader", None, RequestHeaderComp),
        LESignedIntField("MarketSegmentID", 0),
        LESignedIntField("SecuritySubType", 0),
        ByteField("ProductComplex", 0),
        ByteField("NoLegs", 0),
        StrFixedLenField("ComplianceText", 0x00, 20),
        StrFixedLenField("Pad2", "00", 2),
        PacketListField("InstrmtLegGrp", None, InstrmtLegGrpComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class AddComplexInstrumentResponse(Packet):
    name = 'AddComplexInstrumentResponse'
	# sizes = (112, 752)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("NRResponseHeaderME", None, NRResponseHeaderMEComp),
        LESignedLongField("LowLimitPrice", 0),
        LESignedLongField("HighLimitPrice", 0),
        LESignedLongField("SecurityID", 0),
        LELongField("LastUpdateTime", 0),
        LELongField("SecurityResponseID", 0),
        LESignedIntField("MarketSegmentID", 0),
        LESignedIntField("NumberOfSecurities", 0),
        LESignedIntField("SecuritySubType", 0),
        ByteField("MultilegModel", 0),
        ByteField("ImpliedMarketIndicator", 0),
        ByteField("ProductComplex", 0),
        ByteField("NoLegs", 0),
        PacketListField("InstrmtLegGrp", None, InstrmtLegGrpComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class AddFlexibleInstrumentRequest(Packet):
    name = 'AddFlexibleInstrumentRequest'
	# sizes = (72, 72)

    fields_desc = [
        PacketField("MessageHeaderIn", None, MessageHeaderInComp),
        PacketField("RequestHeader", None, RequestHeaderComp),
        LESignedLongField("StrikePrice", 0),
        LESignedIntField("MarketSegmentID", 0),
        LEIntField("MaturityDate", 0),
        LEIntField("ContractDate", 0),
        ByteField("SettlMethod", 0),
        ByteField("OptAttribute", 0),
        ByteField("PutOrCall", 0),
        ByteField("ExerciseStyle", 0),
        StrFixedLenField("ComplianceText", 0x00, 20),
        StrFixedLenField("Pad4", "0000", 4),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class AddFlexibleInstrumentResponse(Packet):
    name = 'AddFlexibleInstrumentResponse'
	# sizes = (104, 104)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("NRResponseHeaderME", None, NRResponseHeaderMEComp),
        LELongField("SecurityResponseID", 0),
        LESignedLongField("SecurityID", 0),
        LESignedLongField("StrikePrice", 0),
        LESignedIntField("MarketSegmentID", 0),
        LEIntField("MaturityDate", 0),
        LEIntField("ContractDate", 0),
        ByteField("ProductComplex", 0),
        ByteField("SettlMethod", 0),
        ByteField("OptAttribute", 0),
        ByteField("PutOrCall", 0),
        ByteField("ExerciseStyle", 0),
        StrFixedLenField("Pad7", "0000000", 7),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class AmendBasketTradeRequest(Packet):
    name = 'AmendBasketTradeRequest'
	# sizes = (280, 27240)

    fields_desc = [
        PacketField("MessageHeaderIn", None, MessageHeaderInComp),
        PacketField("RequestHeader", None, RequestHeaderComp),
        LELongField("BasketTrdMatchID", 0),
        LEIntField("BasketExecID", 0),
        LESignedIntField("MarketSegmentID", 0),
        LEIntField("MaturityMonthYear", 0),
        LEIntField("BasketProfileID", 0),
        LEShortField("TrdType", 0),
        LEShortField("NoBasketSideAlloc", 0),
        ByteField("TradeReportType", 0),
        ByteField("BasketTradeReportType", 0),
        ByteField("NoBasketRootPartyGrps", 0),
        ByteField("NoInstrmtMatchSides", 0),
        StrFixedLenField("BasketTradeReportText", 0x00, 20),
        StrFixedLenField("TradeReportID", 0x00, 20),
        PacketListField("BasketRootPartyGrp", None, BasketRootPartyGrpComp),
        PacketListField("InstrmtMatchSideGrp", None, InstrmtMatchSideGrpComp),
        PacketListField("BasketSideAllocGrp", None, BasketSideAllocGrpComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class ApproveBasketTradeRequest(Packet):
    name = 'ApproveBasketTradeRequest'
	# sizes = (296, 73344)

    fields_desc = [
        PacketField("MessageHeaderIn", None, MessageHeaderInComp),
        PacketField("RequestHeader", None, RequestHeaderComp),
        LELongField("BasketTrdMatchID", 0),
        LEIntField("BasketExecID", 0),
        LESignedIntField("MarketSegmentID", 0),
        LEShortField("RootPartySubIDType", 0),
        LEShortField("NoBasketSideAlloc", 0),
        LEShortField("TrdType", 0),
        ByteField("TradeReportType", 0),
        StrFixedLenField("BasketTradeReportText", 0x00, 20),
        StrFixedLenField("TradeReportID", 0x00, 20),
        StrFixedLenField("BasketSideTradeReportID", 0x00, 20),
        StrFixedLenField("Pad5", "00000", 5),
        PacketListField("BasketSideAllocExtGrp", None, BasketSideAllocExtGrpComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class ApproveReverseTESTradeRequest(Packet):
    name = 'ApproveReverseTESTradeRequest'
	# sizes = (72, 72)

    fields_desc = [
        PacketField("MessageHeaderIn", None, MessageHeaderInComp),
        PacketField("RequestHeader", None, RequestHeaderComp),
        LESignedIntField("MarketSegmentID", 0),
        LEIntField("PackageID", 0),
        LEIntField("AllocID", 0),
        LEIntField("TESExecID", 0),
        LESignedIntField("RelatedMarketSegmentID", 0),
        LEShortField("TrdType", 0),
        StrFixedLenField("TradeReportID", 0x00, 20),
        StrFixedLenField("Pad6", "000000", 6),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class ApproveTESTradeRequest(Packet):
    name = 'ApproveTESTradeRequest'
	# sizes = (240, 240)

    fields_desc = [
        PacketField("MessageHeaderIn", None, MessageHeaderInComp),
        PacketField("RequestHeader", None, RequestHeaderComp),
        LELongField("PartyIDClientID", 0),
        LELongField("PartyIdInvestmentDecisionMaker", 0),
        LELongField("ExecutingTrader", 0),
        LESignedLongField("AllocQty", 0),
        LELongField("CompressionID", 0),
        LEIntField("PackageID", 0),
        LEIntField("AllocID", 0),
        LEIntField("TESExecID", 0),
        LESignedIntField("MarketSegmentID", 0),
        LESignedIntField("RelatedMarketSegmentID", 0),
        LEShortField("TrdType", 0),
        ByteField("TradingCapacity", 0),
        ByteField("TradeReportType", 0),
        ByteField("Side", 0),
        ByteField("OrderAttributeLiquidityProvision", 0),
        ByteField("PartyIdInvestmentDecisionMakerQualifier", 0),
        ByteField("ExecutingTraderQualifier", 0),
        ByteField("OrderAttributeRiskReduction", 0),
        ByteField("OrderOrigination", 0),
        StrFixedLenField("TradeReportID", 0x00, 20),
        ByteField("PositionEffect", 0),
        StrFixedLenField("PartyExecutingFirm", 0x00, 5),
        StrFixedLenField("PartyExecutingTrader", 0x00, 6),
        StrFixedLenField("Account", 0x00, 2),
        StrFixedLenField("FreeText1", 0x00, 12),
        StrFixedLenField("FreeText2", 0x00, 12),
        StrFixedLenField("FreeText3", 0x00, 12),
        StrFixedLenField("PartyIDTakeUpTradingFirm", 0x00, 5),
        StrFixedLenField("PartyIDPositionAccount", 0x00, 32),
        StrFixedLenField("PartyIDOrderOriginationFirm", 0x00, 7),
        StrFixedLenField("PartyIDBeneficiary", 0x00, 9),
        StrFixedLenField("PartyIDLocationID", 0x00, 2),
        ByteField("CustOrderHandlingInst", 0),
        StrFixedLenField("ComplianceText", 0x00, 20),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class BasketApproveBroadcast(Packet):
    name = 'BasketApproveBroadcast'
	# sizes = (400, 76624)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("RBCHeader", None, RBCHeaderComp),
        LELongField("BasketTrdMatchID", 0),
        LELongField("TransactTime", 0),
        LEIntField("BasketExecID", 0),
        LESignedIntField("MarketSegmentID", 0),
        LEIntField("BasketProfileID", 0),
        LEShortField("TrdType", 0),
        LEShortField("NoBasketSideAlloc", 0),
        ByteField("TradeReportType", 0),
        ByteField("BasketTradeReportType", 0),
        ByteField("MessageEventSource", 0),
        ByteField("NoBasketRootPartyGrps", 0),
        ByteField("PartyIDEnteringFirm", 0),
        StrFixedLenField("PartyEnteringTrader", 0x00, 6),
        StrFixedLenField("BasketTradeReportText", 0x00, 20),
        StrFixedLenField("TradeReportID", 0x00, 20),
        StrFixedLenField("Pad5", "00000", 5),
        PacketListField("BasketRootPartyGrp", None, BasketRootPartyGrpComp),
        PacketListField("BasketSideAllocExtBCGrp", None, BasketSideAllocExtBCGrpComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class BasketBroadcast(Packet):
    name = 'BasketBroadcast'
	# sizes = (352, 27312)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("RBCHeader", None, RBCHeaderComp),
        LELongField("BasketTrdMatchID", 0),
        LELongField("TransactTime", 0),
        LEIntField("BasketExecID", 0),
        LESignedIntField("MarketSegmentID", 0),
        LEIntField("MaturityMonthYear", 0),
        LEIntField("BasketProfileID", 0),
        LEShortField("NoBasketSideAlloc", 0),
        LEShortField("TrdType", 0),
        ByteField("TradeReportType", 0),
        ByteField("BasketTradeReportType", 0),
        ByteField("MessageEventSource", 0),
        ByteField("NoBasketRootPartyGrpsBC", 0),
        ByteField("NoInstrmtMatchSides", 0),
        StrFixedLenField("BasketTradeReportText", 0x00, 20),
        StrFixedLenField("TradeReportID", 0x00, 20),
        StrFixedLenField("Pad7", "0000000", 7),
        PacketListField("BasketRootPartyGrp", None, BasketRootPartyGrpComp),
        PacketListField("InstrmtMatchSideGrp", None, InstrmtMatchSideGrpComp),
        PacketListField("BasketSideAllocGrp", None, BasketSideAllocGrpComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class BasketDeleteBroadcast(Packet):
    name = 'BasketDeleteBroadcast'
	# sizes = (96, 96)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("RBCHeader", None, RBCHeaderComp),
        LELongField("BasketTrdMatchID", 0),
        LELongField("TransactTime", 0),
        LESignedIntField("MarketSegmentID", 0),
        LEIntField("BasketExecID", 0),
        LEIntField("BasketProfileID", 0),
        LEShortField("TrdType", 0),
        ByteField("DeleteReason", 0),
        ByteField("MessageEventSource", 0),
        StrFixedLenField("TradeReportID", 0x00, 20),
        StrFixedLenField("Pad4", "0000", 4),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class BasketExecutionBroadcast(Packet):
    name = 'BasketExecutionBroadcast'
	# sizes = (112, 3280)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("RBCHeader", None, RBCHeaderComp),
        LELongField("BasketTrdMatchID", 0),
        LELongField("TransactTime", 0),
        LEIntField("BasketExecID", 0),
        LESignedIntField("MarketSegmentID", 0),
        LEIntField("BasketProfileID", 0),
        LEShortField("TrdType", 0),
        ByteField("TradeReportType", 0),
        ByteField("NoInstrmtMatchSides", 0),
        ByteField("MessageEventSource", 0),
        StrFixedLenField("BasketSideTradeReportID", 0x00, 20),
        StrFixedLenField("Pad3", "000", 3),
        PacketListField("BasketExecGrp", None, BasketExecGrpComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class BasketResponse(Packet):
    name = 'BasketResponse'
	# sizes = (56, 56)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("ResponseHeader", None, ResponseHeaderComp),
        LEIntField("BasketExecID", 0),
        StrFixedLenField("TradeReportID", 0x00, 20),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class BroadcastErrorNotification(Packet):
    name = 'BroadcastErrorNotification'
	# sizes = (32, 2032)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("NotifHeader", None, NotifHeaderComp),
        LEIntField("ApplIDStatus", 0),
        LEIntField("RefApplSubID", 0),
        LEShortField("VarTextLen", 0),
        ByteField("RefApplID", 0),
        ByteField("SessionStatus", 0),
        StrFixedLenField("Pad4", "0000", 4),
        StrFixedLenField("VarText", 0, 2000),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class CLIPDeletionNotification(Packet):
    name = 'CLIPDeletionNotification'
	# sizes = (112, 112)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("RBCHeaderME", None, RBCHeaderMEComp),
        LELongField("OrderID", 0),
        LELongField("ExecID", 0),
        LESignedLongField("SecurityID", 0),
        LESignedLongField("CxlQty", 0),
        LESignedIntField("MarketSegmentID", 0),
        LEShortField("ExecRestatementReason", 0),
        ByteField("ProductComplex", 0),
        ByteField("Side", 0),
        ByteField("OrdStatus", 0),
        ByteField("ExecType", 0),
        StrFixedLenField("Pad6", "000000", 6),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class CLIPExecutionNotification(Packet):
    name = 'CLIPExecutionNotification'
	# sizes = (128, 22528)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("RBCHeaderME", None, RBCHeaderMEComp),
        LELongField("OrderID", 0),
        LELongField("ExecID", 0),
        LESignedLongField("SecurityID", 0),
        LESignedLongField("CxlQty", 0),
        LESignedLongField("LeavesQty", 0),
        LESignedLongField("CumQty", 0),
        LESignedIntField("MarketSegmentID", 0),
        LEShortField("ExecRestatementReason", 0),
        LEShortField("NoLegExecs", 0),
        ByteField("ProductComplex", 0),
        ByteField("Side", 0),
        ByteField("OrdStatus", 0),
        ByteField("ExecType", 0),
        ByteField("MatchType", 0),
        ByteField("NoFills", 0),
        StrFixedLenField("Pad2", "00", 2),
        PacketListField("FillsGrp", None, FillsGrpComp),
        PacketListField("InstrmntLegExecGrp", None, InstrmntLegExecGrpComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class CLIPResponse(Packet):
    name = 'CLIPResponse'
	# sizes = (104, 120)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("NRResponseHeaderME", None, NRResponseHeaderMEComp),
        LELongField("ExecID", 0),
        LESignedLongField("SecurityID", 0),
        LESignedIntField("MarketSegmentID", 0),
        LESignedIntField("CrossRequestID", 0),
        ByteField("NoSides", 0),
        StrFixedLenField("Pad7", "0000000", 7),
        PacketListField("CrossRequestAckSideGrp", None, CrossRequestAckSideGrpComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class CrossRequest(Packet):
    name = 'CrossRequest'
	# sizes = (64, 64)

    fields_desc = [
        PacketField("MessageHeaderIn", None, MessageHeaderInComp),
        PacketField("RequestHeader", None, RequestHeaderComp),
        LESignedLongField("SecurityID", 0),
        LESignedLongField("OrderQty", 0),
        LESignedIntField("MarketSegmentID", 0),
        StrFixedLenField("ComplianceText", 0x00, 20),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class CrossRequestResponse(Packet):
    name = 'CrossRequestResponse'
	# sizes = (64, 64)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("NRResponseHeaderME", None, NRResponseHeaderMEComp),
        LELongField("ExecID", 0),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class DeleteAllOrderBroadcast(Packet):
    name = 'DeleteAllOrderBroadcast'
	# sizes = (112, 12112)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("RBCHeaderME", None, RBCHeaderMEComp),
        LELongField("MassActionReportID", 0),
        LESignedLongField("SecurityID", 0),
        LESignedLongField("Price", 0),
        LESignedIntField("MarketSegmentID", 0),
        LEIntField("TargetPartyIDSessionID", 0),
        LEIntField("TargetPartyIDExecutingTrader", 0),
        LEIntField("PartyIDEnteringTrader", 0),
        LEShortField("NoNotAffectedOrders", 0),
        LEShortField("NoAffectedOrderRequests", 0),
        ByteField("PartyIDEnteringFirm", 0),
        ByteField("MassActionReason", 0),
        ByteField("ExecInst", 0),
        ByteField("Side", 0),
        PacketListField("NotAffectedOrdersGrp", None, NotAffectedOrdersGrpComp),
        PacketListField("AffectedOrderRequestsGrp", None, AffectedOrderRequestsGrpComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class DeleteAllOrderNRResponse(Packet):
    name = 'DeleteAllOrderNRResponse'
	# sizes = (64, 64)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("NRResponseHeaderME", None, NRResponseHeaderMEComp),
        LELongField("MassActionReportID", 0),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class DeleteAllOrderQuoteEventBroadcast(Packet):
    name = 'DeleteAllOrderQuoteEventBroadcast'
	# sizes = (88, 88)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("RBCHeaderME", None, RBCHeaderMEComp),
        LELongField("MassActionReportID", 0),
        LESignedLongField("SecurityID", 0),
        LESignedIntField("MarketSegmentID", 0),
        ByteField("MassActionReason", 0),
        ByteField("ExecInst", 0),
        StrFixedLenField("Pad2", "00", 2),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class DeleteAllOrderRequest(Packet):
    name = 'DeleteAllOrderRequest'
	# sizes = (72, 72)

    fields_desc = [
        PacketField("MessageHeaderIn", None, MessageHeaderInComp),
        PacketField("RequestHeader", None, RequestHeaderComp),
        LESignedLongField("SecurityID", 0),
        LESignedLongField("Price", 0),
        LELongField("PartyIdInvestmentDecisionMaker", 0),
        LELongField("ExecutingTrader", 0),
        LESignedIntField("MarketSegmentID", 0),
        LEIntField("TargetPartyIDSessionID", 0),
        LEIntField("TargetPartyIDExecutingTrader", 0),
        ByteField("Side", 0),
        ByteField("OrderOrigination", 0),
        ByteField("PartyIdInvestmentDecisionMakerQualifier", 0),
        ByteField("ExecutingTraderQualifier", 0),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class DeleteAllOrderResponse(Packet):
    name = 'DeleteAllOrderResponse'
	# sizes = (88, 12088)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("ResponseHeaderME", None, ResponseHeaderMEComp),
        LELongField("MassActionReportID", 0),
        LEShortField("NoNotAffectedOrders", 0),
        LEShortField("NoAffectedOrderRequests", 0),
        StrFixedLenField("Pad4", "0000", 4),
        PacketListField("NotAffectedOrdersGrp", None, NotAffectedOrdersGrpComp),
        PacketListField("AffectedOrderRequestsGrp", None, AffectedOrderRequestsGrpComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class DeleteAllQuoteBroadcast(Packet):
    name = 'DeleteAllQuoteBroadcast'
	# sizes = (104, 4104)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("RBCHeaderME", None, RBCHeaderMEComp),
        LELongField("MassActionReportID", 0),
        LESignedLongField("SecurityID", 0),
        LESignedIntField("MarketSegmentID", 0),
        LEIntField("TargetPartyIDSessionID", 0),
        LEIntField("PartyIDEnteringTrader", 0),
        LEIntField("TargetPartyIDExecutingTrader", 0),
        LEShortField("NoNotAffectedSecurities", 0),
        ByteField("MassActionReason", 0),
        ByteField("PartyIDEnteringFirm", 0),
        StrFixedLenField("TargetPartyIDDeskID", 0x00, 3),
        StrFixedLenField("Pad1", "0", 1),
        PacketListField("NotAffectedSecuritiesGrp", None, NotAffectedSecuritiesGrpComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class DeleteAllQuoteRequest(Packet):
    name = 'DeleteAllQuoteRequest'
	# sizes = (56, 56)

    fields_desc = [
        PacketField("MessageHeaderIn", None, MessageHeaderInComp),
        PacketField("RequestHeader", None, RequestHeaderComp),
        LELongField("PartyIdInvestmentDecisionMaker", 0),
        LELongField("ExecutingTrader", 0),
        LESignedIntField("MarketSegmentID", 0),
        LEIntField("TargetPartyIDSessionID", 0),
        ByteField("PartyIdInvestmentDecisionMakerQualifier", 0),
        ByteField("ExecutingTraderQualifier", 0),
        StrFixedLenField("Pad6", "000000", 6),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class DeleteAllQuoteResponse(Packet):
    name = 'DeleteAllQuoteResponse'
	# sizes = (72, 4072)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("NRResponseHeaderME", None, NRResponseHeaderMEComp),
        LELongField("MassActionReportID", 0),
        LEShortField("NoNotAffectedSecurities", 0),
        StrFixedLenField("Pad6", "000000", 6),
        PacketListField("NotAffectedSecuritiesGrp", None, NotAffectedSecuritiesGrpComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class DeleteBasketTradeRequest(Packet):
    name = 'DeleteBasketTradeRequest'
	# sizes = (64, 64)

    fields_desc = [
        PacketField("MessageHeaderIn", None, MessageHeaderInComp),
        PacketField("RequestHeader", None, RequestHeaderComp),
        LELongField("BasketTrdMatchID", 0),
        LEIntField("BasketExecID", 0),
        LESignedIntField("MarketSegmentID", 0),
        LEShortField("TrdType", 0),
        ByteField("TradeReportType", 0),
        StrFixedLenField("TradeReportID", 0x00, 20),
        StrFixedLenField("Pad1", "0", 1),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class DeleteCLIPRequest(Packet):
    name = 'DeleteCLIPRequest'
	# sizes = (72, 72)

    fields_desc = [
        PacketField("MessageHeaderIn", None, MessageHeaderInComp),
        PacketField("RequestHeader", None, RequestHeaderComp),
        LELongField("OrderID", 0),
        LESignedLongField("SecurityID", 0),
        LELongField("PartyIdInvestmentDecisionMaker", 0),
        LELongField("ExecutingTrader", 0),
        LESignedIntField("MarketSegmentID", 0),
        LESignedIntField("CrossRequestID", 0),
        ByteField("ExecutingTraderQualifier", 0),
        ByteField("PartyIdInvestmentDecisionMakerQualifier", 0),
        StrFixedLenField("Pad6", "000000", 6),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class DeleteOrderBroadcast(Packet):
    name = 'DeleteOrderBroadcast'
	# sizes = (160, 160)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("RBCHeaderME", None, RBCHeaderMEComp),
        LELongField("OrderID", 0),
        LELongField("ClOrdID", 0),
        LELongField("OrigClOrdID", 0),
        LESignedLongField("SecurityID", 0),
        LELongField("ExecID", 0),
        LESignedLongField("CumQty", 0),
        LESignedLongField("CxlQty", 0),
        LESignedIntField("MarketSegmentID", 0),
        LEIntField("PartyIDEnteringTrader", 0),
        LEIntField("PartyIDSessionID", 0),
        LEShortField("ExecRestatementReason", 0),
        ByteField("PartyIDEnteringFirm", 0),
        ByteField("OrdStatus", 0),
        ByteField("ExecType", 0),
        ByteField("ProductComplex", 0),
        ByteField("Side", 0),
        StrFixedLenField("FIXClOrdID", 0x00, 20),
        StrFixedLenField("Pad1", "0", 1),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class DeleteOrderComplexRequest(Packet):
    name = 'DeleteOrderComplexRequest'
	# sizes = (128, 128)

    fields_desc = [
        PacketField("MessageHeaderIn", None, MessageHeaderInComp),
        PacketField("RequestHeader", None, RequestHeaderComp),
        LELongField("OrderID", 0),
        LELongField("ClOrdID", 0),
        LELongField("OrigClOrdID", 0),
        LESignedLongField("SecurityID", 0),
        LELongField("PartyIdInvestmentDecisionMaker", 0),
        LELongField("ExecutingTrader", 0),
        LESignedIntField("MarketSegmentID", 0),
        LEIntField("TargetPartyIDSessionID", 0),
        ByteField("OrderOrigination", 0),
        ByteField("PartyIdInvestmentDecisionMakerQualifier", 0),
        ByteField("ExecutingTraderQualifier", 0),
        StrFixedLenField("FIXClOrdID", 0x00, 20),
        StrFixedLenField("ComplianceText", 0x00, 20),
        StrFixedLenField("Pad5", "00000", 5),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class DeleteOrderNRResponse(Packet):
    name = 'DeleteOrderNRResponse'
	# sizes = (120, 120)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("NRResponseHeaderME", None, NRResponseHeaderMEComp),
        LELongField("OrderID", 0),
        LELongField("ClOrdID", 0),
        LELongField("OrigClOrdID", 0),
        LESignedLongField("SecurityID", 0),
        LELongField("ExecID", 0),
        LESignedLongField("CumQty", 0),
        LESignedLongField("CxlQty", 0),
        ByteField("OrdStatus", 0),
        ByteField("ExecType", 0),
        LEShortField("ExecRestatementReason", 0),
        ByteField("ProductComplex", 0),
        ByteField("TransactionDelayIndicator", 0),
        StrFixedLenField("Pad2", "00", 2),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class DeleteOrderResponse(Packet):
    name = 'DeleteOrderResponse'
	# sizes = (136, 136)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("ResponseHeaderME", None, ResponseHeaderMEComp),
        LELongField("OrderID", 0),
        LELongField("ClOrdID", 0),
        LELongField("OrigClOrdID", 0),
        LESignedLongField("SecurityID", 0),
        LELongField("ExecID", 0),
        LESignedLongField("CumQty", 0),
        LESignedLongField("CxlQty", 0),
        ByteField("OrdStatus", 0),
        ByteField("ExecType", 0),
        LEShortField("ExecRestatementReason", 0),
        ByteField("ProductComplex", 0),
        ByteField("TransactionDelayIndicator", 0),
        StrFixedLenField("Pad2", "00", 2),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class DeleteOrderSingleRequest(Packet):
    name = 'DeleteOrderSingleRequest'
	# sizes = (120, 120)

    fields_desc = [
        PacketField("MessageHeaderIn", None, MessageHeaderInComp),
        PacketField("RequestHeader", None, RequestHeaderComp),
        LELongField("OrderID", 0),
        LELongField("ClOrdID", 0),
        LELongField("OrigClOrdID", 0),
        LELongField("PartyIdInvestmentDecisionMaker", 0),
        LELongField("ExecutingTrader", 0),
        LESignedIntField("MarketSegmentID", 0),
        LEIntField("SimpleSecurityID", 0),
        LEIntField("TargetPartyIDSessionID", 0),
        ByteField("OrderOrigination", 0),
        ByteField("PartyIdInvestmentDecisionMakerQualifier", 0),
        ByteField("ExecutingTraderQualifier", 0),
        StrFixedLenField("FIXClOrdID", 0x00, 20),
        StrFixedLenField("ComplianceText", 0x00, 20),
        StrFixedLenField("Pad1", "0", 1),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class DeleteTESTradeRequest(Packet):
    name = 'DeleteTESTradeRequest'
	# sizes = (72, 72)

    fields_desc = [
        PacketField("MessageHeaderIn", None, MessageHeaderInComp),
        PacketField("RequestHeader", None, RequestHeaderComp),
        LELongField("CompressionID", 0),
        LEIntField("PackageID", 0),
        LESignedIntField("MarketSegmentID", 0),
        LEIntField("TESExecID", 0),
        LESignedIntField("RelatedMarketSegmentID", 0),
        LEShortField("TrdType", 0),
        ByteField("TradeReportType", 0),
        StrFixedLenField("TradeReportID", 0x00, 20),
        StrFixedLenField("Pad1", "0", 1),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class EnterBasketTradeRequest(Packet):
    name = 'EnterBasketTradeRequest'
	# sizes = (272, 27232)

    fields_desc = [
        PacketField("MessageHeaderIn", None, MessageHeaderInComp),
        PacketField("RequestHeader", None, RequestHeaderComp),
        LESignedIntField("MarketSegmentID", 0),
        LEIntField("MaturityMonthYear", 0),
        LEIntField("BasketProfileID", 0),
        LEShortField("TrdType", 0),
        LEShortField("NoBasketSideAlloc", 0),
        ByteField("TradeReportType", 0),
        ByteField("BasketTradeReportType", 0),
        ByteField("NoBasketRootPartyGrps", 0),
        ByteField("NoInstrmtMatchSides", 0),
        StrFixedLenField("BasketTradeReportText", 0x00, 20),
        StrFixedLenField("TradeReportID", 0x00, 20),
        StrFixedLenField("Pad4", "0000", 4),
        PacketListField("BasketRootPartyGrp", None, BasketRootPartyGrpComp),
        PacketListField("InstrmtMatchSideGrp", None, InstrmtMatchSideGrpComp),
        PacketListField("BasketSideAllocGrp", None, BasketSideAllocGrpComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class EnterCLIPRequest(Packet):
    name = 'EnterCLIPRequest'
	# sizes = (240, 720)

    fields_desc = [
        PacketField("MessageHeaderIn", None, MessageHeaderInComp),
        PacketField("RequestHeader", None, RequestHeaderComp),
        LESignedLongField("SecurityID", 0),
        LESignedLongField("Price", 0),
        LESignedLongField("OrderQty", 0),
        LESignedIntField("MarketSegmentID", 0),
        LESignedIntField("CrossID", 0),
        LESignedIntField("CrossRequestID", 0),
        ByteField("NoSides", 0),
        ByteField("NoCrossLegs", 0),
        ByteField("SideDisclosureInstruction", 0),
        ByteField("PriceDisclosureInstruction", 0),
        ByteField("OrderQtyDisclosureInstruction", 0),
        StrFixedLenField("RootPartyContraFirm", 0x00, 5),
        StrFixedLenField("RootPartyContraTrader", 0x00, 6),
        StrFixedLenField("Pad4", "0000", 4),
        PacketListField("CrossRequestSideGrp", None, CrossRequestSideGrpComp),
        PacketListField("SideCrossLegGrp", None, SideCrossLegGrpComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class EnterTESTradeRequest(Packet):
    name = 'EnterTESTradeRequest'
	# sizes = (272, 4184)

    fields_desc = [
        PacketField("MessageHeaderIn", None, MessageHeaderInComp),
        PacketField("RequestHeader", None, RequestHeaderComp),
        LESignedLongField("SecurityID", 0),
        LESignedLongField("LastPx", 0),
        LELongField("TransBkdTime", 0),
        LESignedLongField("UnderlyingPx", 0),
        LESignedLongField("RelatedClosePrice", 0),
        LESignedLongField("RelatedTradeQuantity", 0),
        LESignedLongField("UnderlyingQty", 0),
        LELongField("CompressionID", 0),
        LESignedIntField("MarketSegmentID", 0),
        LEIntField("UnderlyingSettlementDate", 0),
        LEIntField("UnderlyingMaturityDate", 0),
        LEIntField("RelatedTradeID", 0),
        LESignedIntField("RelatedMarketSegmentID", 0),
        LEShortField("TrdType", 0),
        ByteField("ProductComplex", 0),
        ByteField("TradeReportType", 0),
        ByteField("TradePublishIndicator", 0),
        ByteField("NoSideAllocs", 0),
        ByteField("NoEvents", 0),
        ByteField("NoLegs", 0),
        ByteField("NoInstrAttrib", 0),
        ByteField("NoUnderlyingStips", 0),
        ByteField("PartyIDSettlementLocation", 0),
        ByteField("HedgeType", 0),
        ByteField("SwapClearer", 0),
        StrFixedLenField("TradeReportText", 0x00, 20),
        StrFixedLenField("TradeReportID", 0x00, 20),
        StrFixedLenField("UnderlyingSecurityID", 0x00, 12),
        StrFixedLenField("UnderlyingSecurityDesc", 0x00, 30),
        StrFixedLenField("UnderlyingCurrency", 0x00, 3),
        StrFixedLenField("UnderlyingIssuer", 0x00, 30),
        StrFixedLenField("Pad4", "0000", 4),
        PacketListField("SideAllocGrp", None, SideAllocGrpComp),
        PacketListField("TrdInstrmntLegGrp", None, TrdInstrmntLegGrpComp),
        PacketListField("InstrumentEventGrp", None, InstrumentEventGrpComp),
        PacketListField("InstrumentAttributeGrp", None, InstrumentAttributeGrpComp),
        PacketListField("UnderlyingStipGrp", None, UnderlyingStipGrpComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class ForcedLogoutNotification(Packet):
    name = 'ForcedLogoutNotification'
	# sizes = (24, 2024)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("NotifHeader", None, NotifHeaderComp),
        LEShortField("VarTextLen", 0),
        StrFixedLenField("Pad6", "000000", 6),
        StrFixedLenField("VarText", 0, 2000),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class ForcedUserLogoutNotification(Packet):
    name = 'ForcedUserLogoutNotification'
	# sizes = (24, 2024)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("NotifHeader", None, NotifHeaderComp),
        LEIntField("Username", 0),
        LEShortField("VarTextLen", 0),
        ByteField("UserStatus", 0),
        StrFixedLenField("Pad1", "0", 1),
        StrFixedLenField("VarText", 0, 2000),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class Heartbeat(Packet):
    name = 'Heartbeat'
	# sizes = (16, 16)

    fields_desc = [
        PacketField("MessageHeaderIn", None, MessageHeaderInComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class HeartbeatNotification(Packet):
    name = 'HeartbeatNotification'
	# sizes = (16, 16)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("NotifHeader", None, NotifHeaderComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class InquireEnrichmentRuleIDListRequest(Packet):
    name = 'InquireEnrichmentRuleIDListRequest'
	# sizes = (40, 40)

    fields_desc = [
        PacketField("MessageHeaderIn", None, MessageHeaderInComp),
        PacketField("RequestHeader", None, RequestHeaderComp),
        StrFixedLenField("LastEntityProcessed", 0x00000000000000000000000000000000, 16),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class InquireEnrichmentRuleIDListResponse(Packet):
    name = 'InquireEnrichmentRuleIDListResponse'
	# sizes = (56, 25656)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("ResponseHeader", None, ResponseHeaderComp),
        StrFixedLenField("LastEntityProcessed", 0x00000000000000000000000000000000, 16),
        LEShortField("NoEnrichmentRules", 0),
        StrFixedLenField("Pad6", "000000", 6),
        PacketListField("EnrichmentRulesGrp", None, EnrichmentRulesGrpComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class InquireMMParameterRequest(Packet):
    name = 'InquireMMParameterRequest'
	# sizes = (32, 32)

    fields_desc = [
        PacketField("MessageHeaderIn", None, MessageHeaderInComp),
        PacketField("RequestHeader", None, RequestHeaderComp),
        LESignedIntField("MarketSegmentID", 0),
        LEIntField("TargetPartyIDSessionID", 0),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class InquireMMParameterResponse(Packet):
    name = 'InquireMMParameterResponse'
	# sizes = (72, 432)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("NRResponseHeaderME", None, NRResponseHeaderMEComp),
        LELongField("MMParameterReportID", 0),
        LESignedIntField("MarketSegmentID", 0),
        ByteField("NoMMParameters", 0),
        StrFixedLenField("Pad3", "000", 3),
        PacketListField("MMParameterGrp", None, MMParameterGrpComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class InquirePreTradeRiskLimitsRequest(Packet):
    name = 'InquirePreTradeRiskLimitsRequest'
	# sizes = (40, 40)

    fields_desc = [
        PacketField("MessageHeaderIn", None, MessageHeaderInComp),
        PacketField("RequestHeader", None, RequestHeaderComp),
        LESignedIntField("MarketSegmentID", 0),
        ByteField("RiskLimitPlatform", 0),
        StrFixedLenField("PartyExecutingUnit", 0x00, 5),
        StrFixedLenField("RiskLimitGroup", 0x00, 3),
        StrFixedLenField("Pad3", "000", 3),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class InquireSessionListRequest(Packet):
    name = 'InquireSessionListRequest'
	# sizes = (24, 24)

    fields_desc = [
        PacketField("MessageHeaderIn", None, MessageHeaderInComp),
        PacketField("RequestHeader", None, RequestHeaderComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class InquireSessionListResponse(Packet):
    name = 'InquireSessionListResponse'
	# sizes = (48, 8040)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("ResponseHeader", None, ResponseHeaderComp),
        LEShortField("NoSessions", 0),
        StrFixedLenField("Pad6", "000000", 6),
        PacketListField("SessionsGrp", None, SessionsGrpComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class InquireUserRequest(Packet):
    name = 'InquireUserRequest'
	# sizes = (40, 40)

    fields_desc = [
        PacketField("MessageHeaderIn", None, MessageHeaderInComp),
        PacketField("RequestHeader", None, RequestHeaderComp),
        StrFixedLenField("LastEntityProcessed", 0x00000000000000000000000000000000, 16),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class InquireUserResponse(Packet):
    name = 'InquireUserResponse'
	# sizes = (56, 16056)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("ResponseHeader", None, ResponseHeaderComp),
        StrFixedLenField("LastEntityProcessed", 0x00000000000000000000000000000000, 16),
        LEShortField("NoPartyDetails", 0),
        StrFixedLenField("Pad6", "000000", 6),
        PacketListField("PartyDetailsGrp", None, PartyDetailsGrpComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class LegalNotificationBroadcast(Packet):
    name = 'LegalNotificationBroadcast'
	# sizes = (56, 2056)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("RBCHeader", None, RBCHeaderComp),
        LELongField("TransactTime", 0),
        LEShortField("VarTextLen", 0),
        ByteField("UserStatus", 0),
        StrFixedLenField("Pad5", "00000", 5),
        StrFixedLenField("VarText", 0, 2000),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class LogonRequest(Packet):
    name = 'LogonRequest'
	# sizes = (280, 280)

    fields_desc = [
        PacketField("MessageHeaderIn", None, MessageHeaderInComp),
        PacketField("RequestHeader", None, RequestHeaderComp),
        LEIntField("HeartBtInt", 0),
        LEIntField("PartyIDSessionID", 0),
        StrFixedLenField("DefaultCstmApplVerID", 0x00, 30),
        StrFixedLenField("Password", 0x00, 32),
        ByteField("ApplUsageOrders", 0),
        ByteField("ApplUsageQuotes", 0),
        ByteField("OrderRoutingIndicator", 0),
        StrFixedLenField("FIXEngineName", 0x00, 30),
        StrFixedLenField("FIXEngineVersion", 0x00, 30),
        StrFixedLenField("FIXEngineVendor", 0x00, 30),
        StrFixedLenField("ApplicationSystemName", 0x00, 30),
        StrFixedLenField("ApplicationSystemVersion", 0x00, 30),
        StrFixedLenField("ApplicationSystemVendor", 0x00, 30),
        StrFixedLenField("Pad3", "000", 3),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class LogonResponse(Packet):
    name = 'LogonResponse'
	# sizes = (96, 96)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("ResponseHeader", None, ResponseHeaderComp),
        LESignedLongField("ThrottleTimeInterval", 0),
        LEIntField("ThrottleNoMsgs", 0),
        LEIntField("ThrottleDisconnectLimit", 0),
        LEIntField("HeartBtInt", 0),
        LEIntField("SessionInstanceID", 0),
        LEShortField("MarketID", 0),
        ByteField("TradSesMode", 0),
        StrFixedLenField("DefaultCstmApplVerID", 0x00, 30),
        StrFixedLenField("DefaultCstmApplVerSubID", 0x00, 5),
        StrFixedLenField("Pad2", "00", 2),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class LogoutRequest(Packet):
    name = 'LogoutRequest'
	# sizes = (24, 24)

    fields_desc = [
        PacketField("MessageHeaderIn", None, MessageHeaderInComp),
        PacketField("RequestHeader", None, RequestHeaderComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class LogoutResponse(Packet):
    name = 'LogoutResponse'
	# sizes = (32, 32)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("ResponseHeader", None, ResponseHeaderComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class MMParameterDefinitionRequest(Packet):
    name = 'MMParameterDefinitionRequest'
	# sizes = (72, 72)

    fields_desc = [
        PacketField("MessageHeaderIn", None, MessageHeaderInComp),
        PacketField("RequestHeader", None, RequestHeaderComp),
        LESignedLongField("ExposureDuration", 0),
        LESignedLongField("CumQty", 0),
        LESignedLongField("Delta", 0),
        LESignedLongField("Vega", 0),
        LESignedIntField("MarketSegmentID", 0),
        LEIntField("TargetPartyIDSessionID", 0),
        LESignedIntField("PctCount", 0),
        StrFixedLenField("Pad4", "0000", 4),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class MMParameterDefinitionResponse(Packet):
    name = 'MMParameterDefinitionResponse'
	# sizes = (64, 64)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("NRResponseHeaderME", None, NRResponseHeaderMEComp),
        LELongField("ExecID", 0),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class MassQuoteRequest(Packet):
    name = 'MassQuoteRequest'
	# sizes = (72, 4072)

    fields_desc = [
        PacketField("MessageHeaderIn", None, MessageHeaderInComp),
        PacketField("RequestHeader", None, RequestHeaderComp),
        LELongField("QuoteID", 0),
        LELongField("PartyIdInvestmentDecisionMaker", 0),
        LELongField("ExecutingTrader", 0),
        LESignedIntField("MarketSegmentID", 0),
        LEIntField("MatchInstCrossID", 0),
        LEShortField("EnrichmentRuleID", 0),
        ByteField("PriceValidityCheckType", 0),
        ByteField("ValueCheckTypeValue", 0),
        ByteField("QuoteSizeType", 0),
        ByteField("QuoteType", 0),
        ByteField("OrderAttributeLiquidityProvision", 0),
        ByteField("NoQuoteEntries", 0),
        ByteField("PartyIdInvestmentDecisionMakerQualifier", 0),
        ByteField("ExecutingTraderQualifier", 0),
        StrFixedLenField("Pad6", "000000", 6),
        PacketListField("QuoteEntryGrp", None, QuoteEntryGrpComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class MassQuoteResponse(Packet):
    name = 'MassQuoteResponse'
	# sizes = (80, 4880)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("NRResponseHeaderME", None, NRResponseHeaderMEComp),
        LELongField("QuoteID", 0),
        LELongField("QuoteResponseID", 0),
        LESignedIntField("MarketSegmentID", 0),
        ByteField("NoQuoteSideEntries", 0),
        StrFixedLenField("Pad3", "000", 3),
        PacketListField("QuoteEntryAckGrp", None, QuoteEntryAckGrpComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class ModifyBasketTradeRequest(Packet):
    name = 'ModifyBasketTradeRequest'
	# sizes = (280, 27240)

    fields_desc = [
        PacketField("MessageHeaderIn", None, MessageHeaderInComp),
        PacketField("RequestHeader", None, RequestHeaderComp),
        LELongField("BasketTrdMatchID", 0),
        LEIntField("BasketExecID", 0),
        LESignedIntField("MarketSegmentID", 0),
        LEIntField("MaturityMonthYear", 0),
        LEIntField("BasketProfileID", 0),
        LEShortField("TrdType", 0),
        LEShortField("NoBasketSideAlloc", 0),
        ByteField("TradeReportType", 0),
        ByteField("NoBasketRootPartyGrps", 0),
        ByteField("NoInstrmtMatchSides", 0),
        StrFixedLenField("BasketTradeReportText", 0x00, 20),
        StrFixedLenField("TradeReportID", 0x00, 20),
        StrFixedLenField("Pad1", "0", 1),
        PacketListField("BasketRootPartyGrp", None, BasketRootPartyGrpComp),
        PacketListField("InstrmtMatchSideGrp", None, InstrmtMatchSideGrpComp),
        PacketListField("BasketSideAllocGrp", None, BasketSideAllocGrpComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class ModifyOrderComplexRequest(Packet):
    name = 'ModifyOrderComplexRequest'
	# sizes = (264, 424)

    fields_desc = [
        PacketField("MessageHeaderIn", None, MessageHeaderInComp),
        PacketField("RequestHeader", None, RequestHeaderComp),
        LELongField("OrderID", 0),
        LELongField("ClOrdID", 0),
        LELongField("OrigClOrdID", 0),
        LESignedLongField("SecurityID", 0),
        LESignedLongField("Price", 0),
        LESignedLongField("OrderQty", 0),
        LELongField("PartyIDClientID", 0),
        LELongField("PartyIdInvestmentDecisionMaker", 0),
        LELongField("ExecutingTrader", 0),
        LESignedIntField("MarketSegmentID", 0),
        LEIntField("ExpireDate", 0),
        LEIntField("MatchInstCrossID", 0),
        LEIntField("TargetPartyIDSessionID", 0),
        StrFixedLenField("PartyIDTakeUpTradingFirm", 0x00, 5),
        StrFixedLenField("PartyIDOrderOriginationFirm", 0x00, 7),
        StrFixedLenField("PartyIDBeneficiary", 0x00, 9),
        ByteField("ApplSeqIndicator", 0),
        ByteField("ProductComplex", 0),
        ByteField("Side", 0),
        ByteField("OrdType", 0),
        ByteField("PriceValidityCheckType", 0),
        ByteField("ValueCheckTypeValue", 0),
        ByteField("OrderAttributeLiquidityProvision", 0),
        ByteField("ExecInst", 0),
        ByteField("TimeInForce", 0),
        ByteField("TradingCapacity", 0),
        ByteField("OwnershipIndicator", 0),
        ByteField("OrderOrigination", 0),
        ByteField("PartyIdInvestmentDecisionMakerQualifier", 0),
        ByteField("ExecutingTraderQualifier", 0),
        StrFixedLenField("PartyIDLocationID", 0x00, 2),
        ByteField("CustOrderHandlingInst", 0),
        StrFixedLenField("ComplianceText", 0x00, 20),
        StrFixedLenField("PartyIDPositionAccount", 0x00, 32),
        StrFixedLenField("FreeText1", 0x00, 12),
        StrFixedLenField("FreeText2", 0x00, 12),
        StrFixedLenField("FreeText3", 0x00, 12),
        StrFixedLenField("FIXClOrdID", 0x00, 20),
        ByteField("NoLegs", 0),
        StrFixedLenField("Pad5", "00000", 5),
        PacketListField("LegOrdGrp", None, LegOrdGrpComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class ModifyOrderComplexShortRequest(Packet):
    name = 'ModifyOrderComplexShortRequest'
	# sizes = (136, 136)

    fields_desc = [
        PacketField("MessageHeaderIn", None, MessageHeaderInComp),
        PacketField("RequestHeader", None, RequestHeaderComp),
        LELongField("ClOrdID", 0),
        LELongField("OrigClOrdID", 0),
        LESignedLongField("SecurityID", 0),
        LESignedLongField("Price", 0),
        LESignedLongField("OrderQty", 0),
        LELongField("PartyIDClientID", 0),
        LELongField("PartyIdInvestmentDecisionMaker", 0),
        LELongField("ExecutingTrader", 0),
        LESignedIntField("MarketSegmentID", 0),
        LEIntField("MatchInstCrossID", 0),
        LEShortField("EnrichmentRuleID", 0),
        ByteField("ApplSeqIndicator", 0),
        ByteField("ProductComplex", 0),
        ByteField("Side", 0),
        ByteField("PriceValidityCheckType", 0),
        ByteField("ValueCheckTypeValue", 0),
        ByteField("OrderAttributeLiquidityProvision", 0),
        ByteField("ExecInst", 0),
        ByteField("TimeInForce", 0),
        ByteField("TradingCapacity", 0),
        ByteField("OrderOrigination", 0),
        ByteField("PartyIdInvestmentDecisionMakerQualifier", 0),
        ByteField("ExecutingTraderQualifier", 0),
        StrFixedLenField("ComplianceText", 0x00, 20),
        StrFixedLenField("Pad6", "000000", 6),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class ModifyOrderNRResponse(Packet):
    name = 'ModifyOrderNRResponse'
	# sizes = (136, 2536)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("NRResponseHeaderME", None, NRResponseHeaderMEComp),
        LELongField("OrderID", 0),
        LELongField("ClOrdID", 0),
        LELongField("OrigClOrdID", 0),
        LESignedLongField("SecurityID", 0),
        LELongField("ExecID", 0),
        LESignedLongField("LeavesQty", 0),
        LESignedLongField("CumQty", 0),
        LESignedLongField("CxlQty", 0),
        ByteField("OrdStatus", 0),
        ByteField("ExecType", 0),
        LEShortField("ExecRestatementReason", 0),
        ByteField("CrossedIndicator", 0),
        ByteField("ProductComplex", 0),
        ByteField("Triggered", 0),
        ByteField("TransactionDelayIndicator", 0),
        ByteField("NoOrderEvents", 0),
        StrFixedLenField("Pad7", "0000000", 7),
        PacketListField("OrderEventGrp", None, OrderEventGrpComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class ModifyOrderResponse(Packet):
    name = 'ModifyOrderResponse'
	# sizes = (160, 2560)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("ResponseHeaderME", None, ResponseHeaderMEComp),
        LELongField("OrderID", 0),
        LELongField("ClOrdID", 0),
        LELongField("OrigClOrdID", 0),
        LESignedLongField("SecurityID", 0),
        LELongField("ExecID", 0),
        LESignedLongField("LeavesQty", 0),
        LESignedLongField("CumQty", 0),
        LESignedLongField("CxlQty", 0),
        LELongField("TrdRegTSTimePriority", 0),
        ByteField("OrdStatus", 0),
        ByteField("ExecType", 0),
        LEShortField("ExecRestatementReason", 0),
        ByteField("CrossedIndicator", 0),
        ByteField("ProductComplex", 0),
        ByteField("Triggered", 0),
        ByteField("TransactionDelayIndicator", 0),
        ByteField("NoOrderEvents", 0),
        StrFixedLenField("Pad7", "0000000", 7),
        PacketListField("OrderEventGrp", None, OrderEventGrpComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class ModifyOrderSingleRequest(Packet):
    name = 'ModifyOrderSingleRequest'
	# sizes = (272, 272)

    fields_desc = [
        PacketField("MessageHeaderIn", None, MessageHeaderInComp),
        PacketField("RequestHeader", None, RequestHeaderComp),
        LELongField("OrderID", 0),
        LELongField("ClOrdID", 0),
        LELongField("OrigClOrdID", 0),
        LESignedLongField("Price", 0),
        LESignedLongField("OrderQty", 0),
        LESignedLongField("StopPx", 0),
        LELongField("PartyIDClientID", 0),
        LELongField("PartyIdInvestmentDecisionMaker", 0),
        LELongField("ExecutingTrader", 0),
        LEIntField("ExpireDate", 0),
        LESignedIntField("MarketSegmentID", 0),
        LEIntField("SimpleSecurityID", 0),
        LEIntField("MatchInstCrossID", 0),
        LEIntField("TargetPartyIDSessionID", 0),
        StrFixedLenField("PartyIDTakeUpTradingFirm", 0x00, 5),
        StrFixedLenField("PartyIDOrderOriginationFirm", 0x00, 7),
        StrFixedLenField("PartyIDBeneficiary", 0x00, 9),
        ByteField("ApplSeqIndicator", 0),
        ByteField("Side", 0),
        ByteField("OrdType", 0),
        ByteField("PriceValidityCheckType", 0),
        ByteField("ValueCheckTypeValue", 0),
        ByteField("OrderAttributeLiquidityProvision", 0),
        ByteField("TimeInForce", 0),
        ByteField("ExecInst", 0),
        ByteField("TradingSessionSubID", 0),
        ByteField("TradingCapacity", 0),
        ByteField("OrderOrigination", 0),
        ByteField("PartyIdInvestmentDecisionMakerQualifier", 0),
        ByteField("ExecutingTraderQualifier", 0),
        StrFixedLenField("Account", 0x00, 2),
        StrFixedLenField("PartyIDPositionAccount", 0x00, 32),
        ByteField("PositionEffect", 0),
        ByteField("OwnershipIndicator", 0),
        StrFixedLenField("PartyIDLocationID", 0x00, 2),
        ByteField("CustOrderHandlingInst", 0),
        StrFixedLenField("ComplianceText", 0x00, 20),
        StrFixedLenField("FreeText1", 0x00, 12),
        StrFixedLenField("FreeText2", 0x00, 12),
        StrFixedLenField("FreeText3", 0x00, 12),
        StrFixedLenField("FIXClOrdID", 0x00, 20),
        StrFixedLenField("Pad7", "0000000", 7),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class ModifyOrderSingleShortRequest(Packet):
    name = 'ModifyOrderSingleShortRequest'
	# sizes = (128, 128)

    fields_desc = [
        PacketField("MessageHeaderIn", None, MessageHeaderInComp),
        PacketField("RequestHeader", None, RequestHeaderComp),
        LELongField("ClOrdID", 0),
        LELongField("OrigClOrdID", 0),
        LESignedLongField("Price", 0),
        LESignedLongField("OrderQty", 0),
        LELongField("PartyIDClientID", 0),
        LELongField("PartyIdInvestmentDecisionMaker", 0),
        LELongField("ExecutingTrader", 0),
        LEIntField("SimpleSecurityID", 0),
        LEIntField("MatchInstCrossID", 0),
        LEShortField("EnrichmentRuleID", 0),
        ByteField("Side", 0),
        ByteField("PriceValidityCheckType", 0),
        ByteField("ValueCheckTypeValue", 0),
        ByteField("OrderAttributeLiquidityProvision", 0),
        ByteField("TimeInForce", 0),
        ByteField("ApplSeqIndicator", 0),
        ByteField("ExecInst", 0),
        ByteField("TradingCapacity", 0),
        ByteField("OrderOrigination", 0),
        ByteField("PartyIdInvestmentDecisionMakerQualifier", 0),
        ByteField("ExecutingTraderQualifier", 0),
        StrFixedLenField("ComplianceText", 0x00, 20),
        StrFixedLenField("Pad7", "0000000", 7),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class ModifyTESTradeRequest(Packet):
    name = 'ModifyTESTradeRequest'
	# sizes = (152, 3768)

    fields_desc = [
        PacketField("MessageHeaderIn", None, MessageHeaderInComp),
        PacketField("RequestHeader", None, RequestHeaderComp),
        LESignedLongField("LastPx", 0),
        LELongField("TransBkdTime", 0),
        LELongField("CompressionID", 0),
        LESignedLongField("RelatedClosePrice", 0),
        LESignedIntField("MarketSegmentID", 0),
        LEIntField("PackageID", 0),
        LEIntField("TESExecID", 0),
        LESignedIntField("RelatedMarketSegmentID", 0),
        LEShortField("TrdType", 0),
        ByteField("TradeReportType", 0),
        ByteField("TradePublishIndicator", 0),
        ByteField("NoSideAllocs", 0),
        ByteField("NoLegs", 0),
        ByteField("SwapClearer", 0),
        StrFixedLenField("TradeReportText", 0x00, 20),
        StrFixedLenField("TradeReportID", 0x00, 20),
        StrFixedLenField("Pad1", "0", 1),
        PacketListField("SideAllocGrp", None, SideAllocGrpComp),
        PacketListField("TrdInstrmntLegGrp", None, TrdInstrmntLegGrpComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class NewOrderComplexRequest(Packet):
    name = 'NewOrderComplexRequest'
	# sizes = (240, 400)

    fields_desc = [
        PacketField("MessageHeaderIn", None, MessageHeaderInComp),
        PacketField("RequestHeader", None, RequestHeaderComp),
        LELongField("ClOrdID", 0),
        LESignedLongField("SecurityID", 0),
        LESignedLongField("Price", 0),
        LESignedLongField("OrderQty", 0),
        LELongField("PartyIDClientID", 0),
        LELongField("PartyIdInvestmentDecisionMaker", 0),
        LELongField("ExecutingTrader", 0),
        LESignedIntField("MarketSegmentID", 0),
        LEIntField("ExpireDate", 0),
        LEIntField("MatchInstCrossID", 0),
        StrFixedLenField("PartyIDTakeUpTradingFirm", 0x00, 5),
        StrFixedLenField("PartyIDOrderOriginationFirm", 0x00, 7),
        StrFixedLenField("PartyIDBeneficiary", 0x00, 9),
        ByteField("ApplSeqIndicator", 0),
        ByteField("ProductComplex", 0),
        ByteField("Side", 0),
        ByteField("OrdType", 0),
        ByteField("PriceValidityCheckType", 0),
        ByteField("ValueCheckTypeValue", 0),
        ByteField("OrderAttributeLiquidityProvision", 0),
        ByteField("OrderAttributeRiskReduction", 0),
        ByteField("ExecInst", 0),
        ByteField("TimeInForce", 0),
        ByteField("TradingCapacity", 0),
        ByteField("OrderOrigination", 0),
        ByteField("PartyIdInvestmentDecisionMakerQualifier", 0),
        ByteField("ExecutingTraderQualifier", 0),
        StrFixedLenField("PartyIDLocationID", 0x00, 2),
        StrFixedLenField("ComplianceText", 0x00, 20),
        ByteField("CustOrderHandlingInst", 0),
        StrFixedLenField("PartyIDPositionAccount", 0x00, 32),
        StrFixedLenField("FreeText1", 0x00, 12),
        StrFixedLenField("FreeText2", 0x00, 12),
        StrFixedLenField("FreeText3", 0x00, 12),
        StrFixedLenField("FIXClOrdID", 0x00, 20),
        ByteField("NoLegs", 0),
        StrFixedLenField("Pad1", "0", 1),
        PacketListField("LegOrdGrp", None, LegOrdGrpComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class NewOrderComplexShortRequest(Packet):
    name = 'NewOrderComplexShortRequest'
	# sizes = (128, 128)

    fields_desc = [
        PacketField("MessageHeaderIn", None, MessageHeaderInComp),
        PacketField("RequestHeader", None, RequestHeaderComp),
        LESignedLongField("SecurityID", 0),
        LESignedLongField("Price", 0),
        LESignedLongField("OrderQty", 0),
        LELongField("ClOrdID", 0),
        LELongField("PartyIDClientID", 0),
        LELongField("PartyIdInvestmentDecisionMaker", 0),
        LELongField("ExecutingTrader", 0),
        LESignedIntField("MarketSegmentID", 0),
        LEIntField("MatchInstCrossID", 0),
        LEShortField("EnrichmentRuleID", 0),
        ByteField("ApplSeqIndicator", 0),
        ByteField("ProductComplex", 0),
        ByteField("Side", 0),
        ByteField("PriceValidityCheckType", 0),
        ByteField("ValueCheckTypeValue", 0),
        ByteField("OrderAttributeLiquidityProvision", 0),
        ByteField("ExecInst", 0),
        ByteField("TimeInForce", 0),
        ByteField("TradingCapacity", 0),
        ByteField("OrderOrigination", 0),
        ByteField("PartyIdInvestmentDecisionMakerQualifier", 0),
        ByteField("ExecutingTraderQualifier", 0),
        StrFixedLenField("ComplianceText", 0x00, 20),
        StrFixedLenField("Pad6", "000000", 6),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class NewOrderNRResponse(Packet):
    name = 'NewOrderNRResponse'
	# sizes = (120, 2520)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("NRResponseHeaderME", None, NRResponseHeaderMEComp),
        LELongField("OrderID", 0),
        LELongField("ClOrdID", 0),
        LESignedLongField("SecurityID", 0),
        LELongField("ExecID", 0),
        LESignedLongField("LeavesQty", 0),
        LESignedLongField("CxlQty", 0),
        ByteField("OrdStatus", 0),
        ByteField("ExecType", 0),
        LEShortField("ExecRestatementReason", 0),
        ByteField("CrossedIndicator", 0),
        ByteField("ProductComplex", 0),
        ByteField("Triggered", 0),
        ByteField("TransactionDelayIndicator", 0),
        ByteField("NoOrderEvents", 0),
        StrFixedLenField("Pad7", "0000000", 7),
        PacketListField("OrderEventGrp", None, OrderEventGrpComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class NewOrderResponse(Packet):
    name = 'NewOrderResponse'
	# sizes = (152, 2552)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("ResponseHeaderME", None, ResponseHeaderMEComp),
        LELongField("OrderID", 0),
        LELongField("ClOrdID", 0),
        LESignedLongField("SecurityID", 0),
        LELongField("ExecID", 0),
        LESignedLongField("LeavesQty", 0),
        LESignedLongField("CxlQty", 0),
        LELongField("TrdRegTSEntryTime", 0),
        LELongField("TrdRegTSTimePriority", 0),
        ByteField("OrdStatus", 0),
        ByteField("ExecType", 0),
        LEShortField("ExecRestatementReason", 0),
        ByteField("CrossedIndicator", 0),
        ByteField("ProductComplex", 0),
        ByteField("Triggered", 0),
        ByteField("TransactionDelayIndicator", 0),
        ByteField("NoOrderEvents", 0),
        StrFixedLenField("Pad7", "0000000", 7),
        PacketListField("OrderEventGrp", None, OrderEventGrpComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class NewOrderSingleRequest(Packet):
    name = 'NewOrderSingleRequest'
	# sizes = (248, 248)

    fields_desc = [
        PacketField("MessageHeaderIn", None, MessageHeaderInComp),
        PacketField("RequestHeader", None, RequestHeaderComp),
        LESignedLongField("Price", 0),
        LESignedLongField("OrderQty", 0),
        LESignedLongField("StopPx", 0),
        LELongField("ClOrdID", 0),
        LELongField("PartyIDClientID", 0),
        LELongField("PartyIdInvestmentDecisionMaker", 0),
        LELongField("ExecutingTrader", 0),
        LEIntField("ExpireDate", 0),
        LESignedIntField("MarketSegmentID", 0),
        LEIntField("SimpleSecurityID", 0),
        LEIntField("MatchInstCrossID", 0),
        StrFixedLenField("PartyIDTakeUpTradingFirm", 0x00, 5),
        StrFixedLenField("PartyIDOrderOriginationFirm", 0x00, 7),
        StrFixedLenField("PartyIDBeneficiary", 0x00, 9),
        ByteField("ApplSeqIndicator", 0),
        ByteField("Side", 0),
        ByteField("OrdType", 0),
        ByteField("PriceValidityCheckType", 0),
        ByteField("ValueCheckTypeValue", 0),
        ByteField("OrderAttributeLiquidityProvision", 0),
        ByteField("OrderAttributeRiskReduction", 0),
        ByteField("TimeInForce", 0),
        ByteField("ExecInst", 0),
        ByteField("TradingSessionSubID", 0),
        ByteField("TradingCapacity", 0),
        ByteField("OrderOrigination", 0),
        ByteField("PartyIdInvestmentDecisionMakerQualifier", 0),
        ByteField("ExecutingTraderQualifier", 0),
        StrFixedLenField("Account", 0x00, 2),
        StrFixedLenField("PartyIDPositionAccount", 0x00, 32),
        ByteField("PositionEffect", 0),
        StrFixedLenField("PartyIDLocationID", 0x00, 2),
        ByteField("CustOrderHandlingInst", 0),
        StrFixedLenField("ComplianceText", 0x00, 20),
        StrFixedLenField("FreeText1", 0x00, 12),
        StrFixedLenField("FreeText2", 0x00, 12),
        StrFixedLenField("FreeText3", 0x00, 12),
        StrFixedLenField("FIXClOrdID", 0x00, 20),
        StrFixedLenField("Pad3", "000", 3),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class NewOrderSingleShortRequest(Packet):
    name = 'NewOrderSingleShortRequest'
	# sizes = (120, 120)

    fields_desc = [
        PacketField("MessageHeaderIn", None, MessageHeaderInComp),
        PacketField("RequestHeader", None, RequestHeaderComp),
        LESignedLongField("Price", 0),
        LESignedLongField("OrderQty", 0),
        LELongField("ClOrdID", 0),
        LELongField("PartyIDClientID", 0),
        LELongField("PartyIdInvestmentDecisionMaker", 0),
        LELongField("ExecutingTrader", 0),
        LEIntField("SimpleSecurityID", 0),
        LEIntField("MatchInstCrossID", 0),
        LEShortField("EnrichmentRuleID", 0),
        ByteField("Side", 0),
        ByteField("ApplSeqIndicator", 0),
        ByteField("PriceValidityCheckType", 0),
        ByteField("ValueCheckTypeValue", 0),
        ByteField("OrderAttributeLiquidityProvision", 0),
        ByteField("TimeInForce", 0),
        ByteField("ExecInst", 0),
        ByteField("TradingCapacity", 0),
        ByteField("OrderOrigination", 0),
        ByteField("PartyIdInvestmentDecisionMakerQualifier", 0),
        ByteField("ExecutingTraderQualifier", 0),
        StrFixedLenField("ComplianceText", 0x00, 20),
        StrFixedLenField("Pad7", "0000000", 7),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class NewsBroadcast(Packet):
    name = 'NewsBroadcast'
	# sizes = (312, 2312)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("RBCHeader", None, RBCHeaderComp),
        LELongField("OrigTime", 0),
        LEShortField("VarTextLen", 0),
        StrFixedLenField("Headline", 0x00, 256),
        StrFixedLenField("Pad6", "000000", 6),
        StrFixedLenField("VarText", 0, 2000),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class OrderExecNotification(Packet):
    name = 'OrderExecNotification'
	# sizes = (168, 24968)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("RBCHeaderME", None, RBCHeaderMEComp),
        LELongField("OrderID", 0),
        LELongField("ClOrdID", 0),
        LELongField("OrigClOrdID", 0),
        LESignedLongField("SecurityID", 0),
        LELongField("ExecID", 0),
        LESignedLongField("LeavesQty", 0),
        LESignedLongField("CumQty", 0),
        LESignedLongField("CxlQty", 0),
        LESignedIntField("MarketSegmentID", 0),
        LEShortField("NoLegExecs", 0),
        LEShortField("ExecRestatementReason", 0),
        ByteField("Side", 0),
        ByteField("ProductComplex", 0),
        ByteField("OrdStatus", 0),
        ByteField("ExecType", 0),
        ByteField("Triggered", 0),
        ByteField("CrossedIndicator", 0),
        StrFixedLenField("FIXClOrdID", 0x00, 20),
        ByteField("NoFills", 0),
        ByteField("NoOrderEvents", 0),
        StrFixedLenField("Pad4", "0000", 4),
        PacketListField("FillsGrp", None, FillsGrpComp),
        PacketListField("InstrmntLegExecGrp", None, InstrmntLegExecGrpComp),
        PacketListField("OrderEventGrp", None, OrderEventGrpComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class OrderExecReportBroadcast(Packet):
    name = 'OrderExecReportBroadcast'
	# sizes = (352, 25312)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("RBCHeaderME", None, RBCHeaderMEComp),
        LELongField("OrderID", 0),
        LELongField("ClOrdID", 0),
        LELongField("OrigClOrdID", 0),
        LESignedLongField("SecurityID", 0),
        LELongField("ExecID", 0),
        LELongField("TrdRegTSEntryTime", 0),
        LELongField("TrdRegTSTimePriority", 0),
        LESignedLongField("Price", 0),
        LESignedLongField("LeavesQty", 0),
        LESignedLongField("CumQty", 0),
        LESignedLongField("CxlQty", 0),
        LESignedLongField("OrderQty", 0),
        LESignedLongField("StopPx", 0),
        LESignedIntField("MarketSegmentID", 0),
        LEIntField("ExpireDate", 0),
        LEIntField("MatchInstCrossID", 0),
        LEIntField("PartyIDExecutingUnit", 0),
        LEIntField("PartyIDSessionID", 0),
        LEIntField("PartyIDExecutingTrader", 0),
        LEIntField("PartyIDEnteringTrader", 0),
        LEShortField("NoLegExecs", 0),
        LEShortField("ExecRestatementReason", 0),
        ByteField("PartyIDEnteringFirm", 0),
        ByteField("ProductComplex", 0),
        ByteField("OrdStatus", 0),
        ByteField("ExecType", 0),
        ByteField("Side", 0),
        ByteField("OrdType", 0),
        ByteField("TradingCapacity", 0),
        ByteField("TimeInForce", 0),
        ByteField("ExecInst", 0),
        ByteField("TradingSessionSubID", 0),
        ByteField("ApplSeqIndicator", 0),
        StrFixedLenField("Account", 0x00, 2),
        StrFixedLenField("PartyIDPositionAccount", 0x00, 32),
        ByteField("PositionEffect", 0),
        StrFixedLenField("PartyIDTakeUpTradingFirm", 0x00, 5),
        StrFixedLenField("PartyIDOrderOriginationFirm", 0x00, 7),
        StrFixedLenField("PartyIDBeneficiary", 0x00, 9),
        StrFixedLenField("PartyIDLocationID", 0x00, 2),
        ByteField("CustOrderHandlingInst", 0),
        StrFixedLenField("ComplianceText", 0x00, 20),
        StrFixedLenField("FreeText1", 0x00, 12),
        StrFixedLenField("FreeText2", 0x00, 12),
        StrFixedLenField("FreeText3", 0x00, 12),
        StrFixedLenField("FIXClOrdID", 0x00, 20),
        ByteField("NoFills", 0),
        ByteField("NoLegs", 0),
        ByteField("NoOrderEvents", 0),
        ByteField("Triggered", 0),
        ByteField("CrossedIndicator", 0),
        StrFixedLenField("Pad1", "0", 1),
        PacketListField("LegOrdGrp", None, LegOrdGrpComp),
        PacketListField("FillsGrp", None, FillsGrpComp),
        PacketListField("InstrmntLegExecGrp", None, InstrmntLegExecGrpComp),
        PacketListField("OrderEventGrp", None, OrderEventGrpComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class OrderExecResponse(Packet):
    name = 'OrderExecResponse'
	# sizes = (176, 24976)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("ResponseHeaderME", None, ResponseHeaderMEComp),
        LELongField("OrderID", 0),
        LELongField("ClOrdID", 0),
        LELongField("OrigClOrdID", 0),
        LESignedLongField("SecurityID", 0),
        LELongField("ExecID", 0),
        LELongField("TrdRegTSEntryTime", 0),
        LELongField("TrdRegTSTimePriority", 0),
        LESignedLongField("LeavesQty", 0),
        LESignedLongField("CumQty", 0),
        LESignedLongField("CxlQty", 0),
        LESignedIntField("MarketSegmentID", 0),
        LEShortField("NoLegExecs", 0),
        LEShortField("ExecRestatementReason", 0),
        ByteField("Side", 0),
        ByteField("ProductComplex", 0),
        ByteField("OrdStatus", 0),
        ByteField("ExecType", 0),
        ByteField("Triggered", 0),
        ByteField("CrossedIndicator", 0),
        ByteField("TransactionDelayIndicator", 0),
        ByteField("NoFills", 0),
        ByteField("NoOrderEvents", 0),
        StrFixedLenField("Pad7", "0000000", 7),
        PacketListField("FillsGrp", None, FillsGrpComp),
        PacketListField("InstrmntLegExecGrp", None, InstrmntLegExecGrpComp),
        PacketListField("OrderEventGrp", None, OrderEventGrpComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class PartyActionReport(Packet):
    name = 'PartyActionReport'
	# sizes = (72, 72)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("RBCHeader", None, RBCHeaderComp),
        LELongField("TransactTime", 0),
        LEIntField("TradeDate", 0),
        LEIntField("RequestingPartyIDExecutingTrader", 0),
        LEIntField("PartyIDExecutingUnit", 0),
        LEIntField("PartyIDExecutingTrader", 0),
        LEIntField("RequestingPartyIDExecutingSystem", 0),
        LEShortField("MarketID", 0),
        ByteField("PartyActionType", 0),
        ByteField("RequestingPartyIDEnteringFirm", 0),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class PartyEntitlementsUpdateReport(Packet):
    name = 'PartyEntitlementsUpdateReport'
	# sizes = (88, 88)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("RBCHeader", None, RBCHeaderComp),
        LELongField("TransactTime", 0),
        LEIntField("TradeDate", 0),
        LEIntField("PartyDetailIDExecutingUnit", 0),
        LEIntField("RequestingPartyIDExecutingSystem", 0),
        LEShortField("MarketID", 0),
        ByteField("ListUpdateAction", 0),
        StrFixedLenField("RequestingPartyEnteringFirm", 0x00, 9),
        StrFixedLenField("RequestingPartyClearingFirm", 0x00, 9),
        ByteField("PartyDetailStatus", 0),
        StrFixedLenField("Pad6", "000000", 6),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class PingRequest(Packet):
    name = 'PingRequest'
	# sizes = (32, 32)

    fields_desc = [
        PacketField("MessageHeaderIn", None, MessageHeaderInComp),
        PacketField("RequestHeader", None, RequestHeaderComp),
        LEShortField("PartitionID", 0),
        StrFixedLenField("Pad6", "000000", 6),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class PingResponse(Packet):
    name = 'PingResponse'
	# sizes = (64, 64)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("NRResponseHeaderME", None, NRResponseHeaderMEComp),
        LELongField("TransactTime", 0),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class PreTradeRiskLimitResponse(Packet):
    name = 'PreTradeRiskLimitResponse'
	# sizes = (80, 2640)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("NRResponseHeaderME", None, NRResponseHeaderMEComp),
        LELongField("RiskLimitReportID", 0),
        LESignedIntField("MarketSegmentID", 0),
        ByteField("NoRiskLimits", 0),
        ByteField("PartyDetailStatus", 0),
        ByteField("RiskLimitPlatform", 0),
        StrFixedLenField("PartyDetailExecutingUnit", 0x00, 5),
        StrFixedLenField("Pad4", "0000", 4),
        PacketListField("RiskLimitsRptGrp", None, RiskLimitsRptGrpComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class PreTradeRiskLimitsDefinitionRequest(Packet):
    name = 'PreTradeRiskLimitsDefinitionRequest'
	# sizes = (48, 80)

    fields_desc = [
        PacketField("MessageHeaderIn", None, MessageHeaderInComp),
        PacketField("RequestHeader", None, RequestHeaderComp),
        LELongField("NettingCoefficient", 0),
        LESignedIntField("MarketSegmentID", 0),
        ByteField("RiskLimitPlatform", 0),
        ByteField("NoRiskLimitsQty", 0),
        ByteField("PartyDetailStatus", 0),
        StrFixedLenField("RiskLimitGroup", 0x00, 3),
        StrFixedLenField("PartyDetailExecutingUnit", 0x00, 5),
        StrFixedLenField("Pad1", "0", 1),
        PacketListField("RiskLimitQtyGrp", None, RiskLimitQtyGrpComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class QuoteActivationNotification(Packet):
    name = 'QuoteActivationNotification'
	# sizes = (88, 4088)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("RBCHeaderME", None, RBCHeaderMEComp),
        LELongField("MassActionReportID", 0),
        LESignedIntField("MarketSegmentID", 0),
        LEIntField("PartyIDEnteringTrader", 0),
        LEShortField("NoNotAffectedSecurities", 0),
        ByteField("PartyIDEnteringFirm", 0),
        ByteField("MassActionType", 0),
        ByteField("MassActionSubType", 0),
        ByteField("MassActionReason", 0),
        StrFixedLenField("Pad2", "00", 2),
        PacketListField("NotAffectedSecuritiesGrp", None, NotAffectedSecuritiesGrpComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class QuoteActivationRequest(Packet):
    name = 'QuoteActivationRequest'
	# sizes = (56, 56)

    fields_desc = [
        PacketField("MessageHeaderIn", None, MessageHeaderInComp),
        PacketField("RequestHeader", None, RequestHeaderComp),
        LELongField("PartyIdInvestmentDecisionMaker", 0),
        LELongField("ExecutingTrader", 0),
        LESignedIntField("MarketSegmentID", 0),
        LEIntField("TargetPartyIDSessionID", 0),
        ByteField("MassActionType", 0),
        ByteField("MassActionSubType", 0),
        ByteField("PartyIdInvestmentDecisionMakerQualifier", 0),
        ByteField("ExecutingTraderQualifier", 0),
        StrFixedLenField("Pad4", "0000", 4),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class QuoteActivationResponse(Packet):
    name = 'QuoteActivationResponse'
	# sizes = (72, 4072)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("NRResponseHeaderME", None, NRResponseHeaderMEComp),
        LELongField("MassActionReportID", 0),
        LEShortField("NoNotAffectedSecurities", 0),
        StrFixedLenField("Pad6", "000000", 6),
        PacketListField("NotAffectedSecuritiesGrp", None, NotAffectedSecuritiesGrpComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class QuoteExecutionReport(Packet):
    name = 'QuoteExecutionReport'
	# sizes = (128, 24080)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("RBCHeaderME", None, RBCHeaderMEComp),
        LELongField("ExecID", 0),
        LESignedIntField("MarketSegmentID", 0),
        LEShortField("NoLegExecs", 0),
        ByteField("NoQuoteEvents", 0),
        StrFixedLenField("Pad1", "0", 1),
        PacketListField("QuoteEventGrp", None, QuoteEventGrpComp),
        PacketListField("QuoteLegExecGrp", None, QuoteLegExecGrpComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class RFQRequest(Packet):
    name = 'RFQRequest'
	# sizes = (72, 72)

    fields_desc = [
        PacketField("MessageHeaderIn", None, MessageHeaderInComp),
        PacketField("RequestHeader", None, RequestHeaderComp),
        LESignedLongField("SecurityID", 0),
        LESignedLongField("OrderQty", 0),
        LESignedIntField("MarketSegmentID", 0),
        ByteField("Side", 0),
        StrFixedLenField("ComplianceText", 0x00, 20),
        StrFixedLenField("Pad7", "0000000", 7),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class RFQResponse(Packet):
    name = 'RFQResponse'
	# sizes = (64, 64)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("NRResponseHeaderME", None, NRResponseHeaderMEComp),
        LELongField("ExecID", 0),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class Reject(Packet):
    name = 'Reject'
	# sizes = (64, 2064)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("NRResponseHeaderME", None, NRResponseHeaderMEComp),
        LEIntField("SessionRejectReason", 0),
        LEShortField("VarTextLen", 0),
        ByteField("SessionStatus", 0),
        StrFixedLenField("Pad1", "0", 1),
        StrFixedLenField("VarText", 0, 2000),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class RetransmitMEMessageRequest(Packet):
    name = 'RetransmitMEMessageRequest'
	# sizes = (64, 64)

    fields_desc = [
        PacketField("MessageHeaderIn", None, MessageHeaderInComp),
        PacketField("RequestHeader", None, RequestHeaderComp),
        LEIntField("SubscriptionScope", 0),
        LEShortField("PartitionID", 0),
        ByteField("RefApplID", 0),
        StrFixedLenField("ApplBegMsgID", 0x00000000000000000000000000000000, 16),
        StrFixedLenField("ApplEndMsgID", 0x00000000000000000000000000000000, 16),
        StrFixedLenField("Pad1", "0", 1),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class RetransmitMEMessageResponse(Packet):
    name = 'RetransmitMEMessageResponse'
	# sizes = (72, 72)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("ResponseHeader", None, ResponseHeaderComp),
        LEShortField("ApplTotalMessageCount", 0),
        StrFixedLenField("ApplEndMsgID", 0x00000000000000000000000000000000, 16),
        StrFixedLenField("RefApplLastMsgID", 0x00000000000000000000000000000000, 16),
        StrFixedLenField("Pad6", "000000", 6),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class RetransmitRequest(Packet):
    name = 'RetransmitRequest'
	# sizes = (48, 48)

    fields_desc = [
        PacketField("MessageHeaderIn", None, MessageHeaderInComp),
        PacketField("RequestHeader", None, RequestHeaderComp),
        LELongField("ApplBegSeqNum", 0),
        LELongField("ApplEndSeqNum", 0),
        LEShortField("PartitionID", 0),
        ByteField("RefApplID", 0),
        StrFixedLenField("Pad5", "00000", 5),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class RetransmitResponse(Packet):
    name = 'RetransmitResponse'
	# sizes = (56, 56)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("ResponseHeader", None, ResponseHeaderComp),
        LELongField("ApplEndSeqNum", 0),
        LELongField("RefApplLastSeqNum", 0),
        LEShortField("ApplTotalMessageCount", 0),
        StrFixedLenField("Pad6", "000000", 6),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class ReverseTESTradeRequest(Packet):
    name = 'ReverseTESTradeRequest'
	# sizes = (200, 200)

    fields_desc = [
        PacketField("MessageHeaderIn", None, MessageHeaderInComp),
        PacketField("RequestHeader", None, RequestHeaderComp),
        LESignedIntField("MarketSegmentID", 0),
        LEIntField("PackageID", 0),
        LEIntField("TESExecID", 0),
        LESignedIntField("RelatedMarketSegmentID", 0),
        LEShortField("TrdType", 0),
        StrFixedLenField("TradeReportID", 0x00, 20),
        StrFixedLenField("ReversalReasonText", 0x00, 132),
        StrFixedLenField("Pad6", "000000", 6),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class RiskNotificationBroadcast(Packet):
    name = 'RiskNotificationBroadcast'
	# sizes = (88, 88)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("RBCHeader", None, RBCHeaderComp),
        LELongField("TransactTime", 0),
        LEIntField("TradeDate", 0),
        LEIntField("PartyDetailIDExecutingUnit", 0),
        LEIntField("RequestingPartyIDExecutingSystem", 0),
        LEShortField("MarketID", 0),
        ByteField("ListUpdateAction", 0),
        ByteField("RiskLimitAction", 0),
        StrFixedLenField("RequestingPartyEnteringFirm", 0x00, 9),
        StrFixedLenField("RequestingPartyClearingFirm", 0x00, 9),
        StrFixedLenField("Pad6", "000000", 6),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class SRQSCreateDealNotification(Packet):
    name = 'SRQSCreateDealNotification'
	# sizes = (488, 2896)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("RBCHeader", None, RBCHeaderComp),
        LELongField("TransactTime", 0),
        LESignedLongField("LastPx", 0),
        LESignedLongField("LastQty", 0),
        LESignedLongField("SecurityID", 0),
        LELongField("ExpireTime", 0),
        LESignedLongField("UnderlyingPx", 0),
        LESignedLongField("UnderlyingDeltaPercentage", 0),
        LESignedLongField("UnderlyingEffectiveDeltaPercentage", 0),
        LESignedLongField("UnderlyingQty", 0),
        LESignedLongField("UnderlyingPriceStipValue", 0),
        LEIntField("NegotiationID", 0),
        LEIntField("TradeID", 0),
        LEIntField("OrigTradeID", 0),
        ByteField("TrdRptStatus", 0),
        ByteField("TradeReportType", 0),
        ByteField("MessageEventSource", 0),
        ByteField("Side", 0),
        ByteField("NoOrderBookItems", 0),
        ByteField("TradingCapacity", 0),
        ByteField("TradePublishIndicator", 0),
        ByteField("HedgingInstruction", 0),
        ByteField("NoSRQSTargetPartyTrdGrps", 0),
        StrFixedLenField("RootPartyExecutingFirm", 0x00, 5),
        StrFixedLenField("RootPartyExecutingTrader", 0x00, 6),
        StrFixedLenField("RootPartyEnteringTrader", 0x00, 6),
        StrFixedLenField("FirmTradeID", 0x00, 20),
        StrFixedLenField("FirmNegotiationID", 0x00, 20),
        StrFixedLenField("FreeText1", 0x00, 12),
        StrFixedLenField("FreeText2", 0x00, 12),
        StrFixedLenField("FreeText3", 0x00, 12),
        StrFixedLenField("FreeText5", 0x00, 132),
        ByteField("PositionEffect", 0),
        StrFixedLenField("Account", 0x00, 2),
        StrFixedLenField("PartyIDBeneficiary", 0x00, 9),
        ByteField("CustOrderHandlingInst", 0),
        StrFixedLenField("PartyIDOrderOriginationFirm", 0x00, 7),
        StrFixedLenField("PartyIDPositionAccount", 0x00, 32),
        StrFixedLenField("PartyIDLocationID", 0x00, 2),
        StrFixedLenField("ComplianceText", 0x00, 20),
        StrFixedLenField("PartyIDTakeUpTradingFirm", 0x00, 5),
        StrFixedLenField("Pad3", "000", 3),
        PacketListField("OrderBookItemGrp", None, OrderBookItemGrpComp),
        PacketListField("SRQSTargetPartyTrdGrp", None, SRQSTargetPartyTrdGrpComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class SRQSDealNotification(Packet):
    name = 'SRQSDealNotification'
	# sizes = (440, 1600)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("RBCHeader", None, RBCHeaderComp),
        LELongField("TransactTime", 0),
        LESignedLongField("UnderlyingPriceStipValue", 0),
        LESignedLongField("UnderlyingPx", 0),
        LESignedLongField("LastPx", 0),
        LESignedLongField("LastQty", 0),
        LEIntField("NegotiationID", 0),
        LEIntField("TradeID", 0),
        LEShortField("RequestingPartySubIDType", 0),
        ByteField("TrdRptStatus", 0),
        ByteField("TradeRequestResult", 0),
        ByteField("MessageEventSource", 0),
        ByteField("TradingCapacity", 0),
        ByteField("NoSRQSTargetPartyTrdGrps", 0),
        StrFixedLenField("RootPartyExecutingFirm", 0x00, 5),
        StrFixedLenField("RootPartyExecutingTrader", 0x00, 6),
        StrFixedLenField("RootPartyEnteringTrader", 0x00, 6),
        StrFixedLenField("FirmTradeID", 0x00, 20),
        StrFixedLenField("FirmNegotiationID", 0x00, 20),
        StrFixedLenField("FreeText1", 0x00, 12),
        StrFixedLenField("FreeText2", 0x00, 12),
        StrFixedLenField("FreeText3", 0x00, 12),
        StrFixedLenField("FreeText5", 0x00, 132),
        ByteField("PositionEffect", 0),
        StrFixedLenField("Account", 0x00, 2),
        StrFixedLenField("PartyIDBeneficiary", 0x00, 9),
        ByteField("CustOrderHandlingInst", 0),
        StrFixedLenField("PartyIDOrderOriginationFirm", 0x00, 7),
        StrFixedLenField("PartyIDPositionAccount", 0x00, 32),
        StrFixedLenField("PartyIDLocationID", 0x00, 2),
        StrFixedLenField("ComplianceText", 0x00, 20),
        StrFixedLenField("PartyIDTakeUpTradingFirm", 0x00, 5),
        StrFixedLenField("Pad1", "0", 1),
        PacketListField("SRQSTargetPartyTrdGrp", None, SRQSTargetPartyTrdGrpComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class SRQSDealResponse(Packet):
    name = 'SRQSDealResponse'
	# sizes = (96, 336)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("ResponseHeader", None, ResponseHeaderComp),
        LESignedLongField("SecurityID", 0),
        LEIntField("NegotiationID", 0),
        LEIntField("TradeID", 0),
        LEIntField("SecondaryTradeID", 0),
        ByteField("NoSRQSQuoteGrps", 0),
        StrFixedLenField("FirmTradeID", 0x00, 20),
        StrFixedLenField("FirmNegotiationID", 0x00, 20),
        StrFixedLenField("Pad3", "000", 3),
        PacketListField("SRQSQuoteGrp", None, SRQSQuoteGrpComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class SRQSEnterQuoteRequest(Packet):
    name = 'SRQSEnterQuoteRequest'
	# sizes = (376, 376)

    fields_desc = [
        PacketField("MessageHeaderIn", None, MessageHeaderInComp),
        PacketField("RequestHeader", None, RequestHeaderComp),
        LESignedLongField("BidPx", 0),
        LESignedLongField("OfferPx", 0),
        LESignedLongField("UnderlyingDeltaPercentage", 0),
        LESignedLongField("BidSize", 0),
        LESignedLongField("OfferSize", 0),
        LELongField("PartyIDClientID", 0),
        LELongField("PartyIdInvestmentDecisionMaker", 0),
        LELongField("ExecutingTrader", 0),
        LESignedLongField("QuoteRefPrice", 0),
        LELongField("ValidUntilTime", 0),
        LESignedIntField("MarketSegmentID", 0),
        LEIntField("NegotiationID", 0),
        ByteField("OrderAttributeLiquidityProvision", 0),
        ByteField("ExecutingTraderQualifier", 0),
        ByteField("PartyIdInvestmentDecisionMakerQualifier", 0),
        ByteField("TradingCapacity", 0),
        StrFixedLenField("PartyExecutingFirm", 0x00, 5),
        StrFixedLenField("PartyExecutingTrader", 0x00, 6),
        StrFixedLenField("FreeText1", 0x00, 12),
        StrFixedLenField("FreeText2", 0x00, 12),
        StrFixedLenField("FreeText3", 0x00, 12),
        StrFixedLenField("FreeText5", 0x00, 132),
        ByteField("PositionEffect", 0),
        StrFixedLenField("Account", 0x00, 2),
        StrFixedLenField("PartyIDBeneficiary", 0x00, 9),
        ByteField("CustOrderHandlingInst", 0),
        StrFixedLenField("PartyIDOrderOriginationFirm", 0x00, 7),
        StrFixedLenField("PartyIDPositionAccount", 0x00, 32),
        StrFixedLenField("PartyIDLocationID", 0x00, 2),
        StrFixedLenField("ComplianceText", 0x00, 20),
        StrFixedLenField("PartyIDTakeUpTradingFirm", 0x00, 5),
        StrFixedLenField("Pad2", "00", 2),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class SRQSHitQuoteRequest(Packet):
    name = 'SRQSHitQuoteRequest'
	# sizes = (368, 1088)

    fields_desc = [
        PacketField("MessageHeaderIn", None, MessageHeaderInComp),
        PacketField("RequestHeader", None, RequestHeaderComp),
        LELongField("ValidUntilTime", 0),
        LESignedLongField("UnderlyingQty", 0),
        LESignedLongField("UnderlyingPriceStipValue", 0),
        LELongField("PartyIDClientID", 0),
        LELongField("PartyIdInvestmentDecisionMaker", 0),
        LELongField("ExecutingTrader", 0),
        LESignedIntField("MarketSegmentID", 0),
        LEIntField("NegotiationID", 0),
        ByteField("OrderAttributeLiquidityProvision", 0),
        ByteField("ExecutingTraderQualifier", 0),
        ByteField("PartyIdInvestmentDecisionMakerQualifier", 0),
        ByteField("TradingCapacity", 0),
        ByteField("TradePublishIndicator", 0),
        ByteField("OrderOrigination", 0),
        ByteField("HedgingInstruction", 0),
        ByteField("NoSRQSQuoteGrps", 0),
        StrFixedLenField("PartyExecutingFirm", 0x00, 5),
        StrFixedLenField("PartyExecutingTrader", 0x00, 6),
        StrFixedLenField("FirmTradeID", 0x00, 20),
        StrFixedLenField("FreeText1", 0x00, 12),
        StrFixedLenField("FreeText2", 0x00, 12),
        StrFixedLenField("FreeText3", 0x00, 12),
        StrFixedLenField("FreeText5", 0x00, 132),
        ByteField("PositionEffect", 0),
        StrFixedLenField("Account", 0x00, 2),
        StrFixedLenField("PartyIDBeneficiary", 0x00, 9),
        ByteField("CustOrderHandlingInst", 0),
        StrFixedLenField("PartyIDOrderOriginationFirm", 0x00, 7),
        StrFixedLenField("PartyIDPositionAccount", 0x00, 32),
        StrFixedLenField("PartyIDLocationID", 0x00, 2),
        StrFixedLenField("ComplianceText", 0x00, 20),
        StrFixedLenField("PartyIDTakeUpTradingFirm", 0x00, 5),
        StrFixedLenField("Pad2", "00", 2),
        PacketListField("SRQSHitQuoteGrp", None, SRQSHitQuoteGrpComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class SRQSInquireSmartRespondentRequest(Packet):
    name = 'SRQSInquireSmartRespondentRequest'
	# sizes = (32, 32)

    fields_desc = [
        PacketField("MessageHeaderIn", None, MessageHeaderInComp),
        PacketField("RequestHeader", None, RequestHeaderComp),
        LESignedIntField("MarketSegmentID", 0),
        ByteField("EurexVolumeRanking", 0),
        ByteField("EnlightRFQAvgRespTimeRanking", 0),
        ByteField("EnlightRFQAvgRespRateRanking", 0),
        ByteField("TradeToQuoteRatioRanking", 0),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class SRQSInquireSmartRespondentResponse(Packet):
    name = 'SRQSInquireSmartRespondentResponse'
	# sizes = (40, 16040)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("ResponseHeader", None, ResponseHeaderComp),
        LESignedIntField("MarketSegmentID", 0),
        LEShortField("NoPartyDetails", 0),
        StrFixedLenField("Pad2", "00", 2),
        PacketListField("SmartPartyDetailGrp", None, SmartPartyDetailGrpComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class SRQSNegotiationNotification(Packet):
    name = 'SRQSNegotiationNotification'
	# sizes = (456, 456)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("RBCHeader", None, RBCHeaderComp),
        LELongField("TransactTime", 0),
        LESignedLongField("QuoteRefPrice", 0),
        LESignedLongField("UnderlyingDeltaPercentage", 0),
        LESignedLongField("BidPx", 0),
        LESignedLongField("OfferPx", 0),
        LESignedLongField("LastPx", 0),
        LESignedLongField("LeavesQty", 0),
        LESignedLongField("LastQty", 0),
        LELongField("EffectiveTime", 0),
        LELongField("LastUpdateTime", 0),
        LELongField("TradeToQuoteRatio", 0),
        LEIntField("NegotiationID", 0),
        LEIntField("NumberOfRespondents", 0),
        LEShortField("TradeToQuoteRatioPosition", 0),
        ByteField("QuoteType", 0),
        ByteField("QuoteSubType", 0),
        ByteField("QuoteInstruction", 0),
        ByteField("Side", 0),
        ByteField("TradeAggregationTransType", 0),
        ByteField("QuoteCondition", 0),
        StrFixedLenField("PartyExecutingFirm", 0x00, 5),
        StrFixedLenField("PartyExecutingTrader", 0x00, 6),
        StrFixedLenField("PartyEnteringTrader", 0x00, 6),
        StrFixedLenField("TargetPartyExecutingFirm", 0x00, 5),
        StrFixedLenField("TargetPartyExecutingTrader", 0x00, 6),
        StrFixedLenField("FirmNegotiationID", 0x00, 20),
        StrFixedLenField("FreeText5", 0x00, 132),
        StrFixedLenField("PartyOrderOriginationTrader", 0x00, 132),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class SRQSNegotiationRequesterNotification(Packet):
    name = 'SRQSNegotiationRequesterNotification'
	# sizes = (464, 2064)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("RBCHeader", None, RBCHeaderComp),
        LELongField("TransactTime", 0),
        LELongField("TrdRegTSExecutionTime", 0),
        LESignedLongField("QuoteRefPrice", 0),
        LESignedLongField("UnderlyingDeltaPercentage", 0),
        LESignedLongField("BidPx", 0),
        LESignedLongField("OfferPx", 0),
        LESignedLongField("OrderQty", 0),
        LESignedLongField("LastPx", 0),
        LESignedLongField("LeavesQty", 0),
        LESignedLongField("LastQty", 0),
        LELongField("EffectiveTime", 0),
        LELongField("LastUpdateTime", 0),
        LELongField("TradeToRequestRatio", 0),
        LEIntField("NegotiationID", 0),
        LEIntField("NumberOfRespondents", 0),
        ByteField("QuoteType", 0),
        ByteField("QuoteSubType", 0),
        ByteField("NoTargetPartyIDs", 0),
        ByteField("NumberOfRespDisclosureInstruction", 0),
        ByteField("Side", 0),
        ByteField("ShowLastDealOnClosure", 0),
        ByteField("TradeAggregationTransType", 0),
        ByteField("QuoteCondition", 0),
        StrFixedLenField("PartyExecutingFirm", 0x00, 5),
        StrFixedLenField("PartyExecutingTrader", 0x00, 6),
        StrFixedLenField("PartyEnteringTrader", 0x00, 6),
        StrFixedLenField("FirmNegotiationID", 0x00, 20),
        StrFixedLenField("FreeText5", 0x00, 132),
        StrFixedLenField("PartyOrderOriginationTrader", 0x00, 132),
        StrFixedLenField("Pad3", "000", 3),
        PacketListField("TargetParties", None, TargetPartiesComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class SRQSNegotiationStatusNotification(Packet):
    name = 'SRQSNegotiationStatusNotification'
	# sizes = (88, 88)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("RBCHeader", None, RBCHeaderComp),
        LELongField("TransactTime", 0),
        LELongField("EffectiveTime", 0),
        LEIntField("NegotiationID", 0),
        ByteField("QuoteCondition", 0),
        StrFixedLenField("FirmNegotiationID", 0x00, 20),
        StrFixedLenField("Pad7", "0000000", 7),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class SRQSOpenNegotiationNotification(Packet):
    name = 'SRQSOpenNegotiationNotification'
	# sizes = (488, 968)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("RBCHeader", None, RBCHeaderComp),
        LELongField("TransactTime", 0),
        LELongField("NegotiationStartTime", 0),
        LESignedLongField("SecurityID", 0),
        LESignedLongField("BidPx", 0),
        LESignedLongField("OfferPx", 0),
        LESignedLongField("LeavesQty", 0),
        LESignedLongField("LastQty", 0),
        LESignedLongField("LastPx", 0),
        LESignedLongField("QuoteRefPrice", 0),
        LESignedLongField("UnderlyingDeltaPercentage", 0),
        LELongField("ExpireTime", 0),
        LELongField("TradeToRequestRatio", 0),
        LELongField("TradeToQuoteRatio", 0),
        LEIntField("NegotiationID", 0),
        LESignedIntField("MarketSegmentID", 0),
        LESignedIntField("SecuritySubType", 0),
        LEIntField("NumberOfRespondents", 0),
        LEShortField("TradeToQuoteRatioPosition", 0),
        ByteField("QuoteType", 0),
        ByteField("QuoteSubType", 0),
        ByteField("NoLegs", 0),
        ByteField("Side", 0),
        ByteField("ProductComplex", 0),
        ByteField("RespondentType", 0),
        ByteField("TradeAggregationTransType", 0),
        ByteField("QuoteCondition", 0),
        StrFixedLenField("PartyExecutingFirm", 0x00, 5),
        StrFixedLenField("PartyExecutingTrader", 0x00, 6),
        StrFixedLenField("PartyEnteringTrader", 0x00, 6),
        StrFixedLenField("TargetPartyExecutingFirm", 0x00, 5),
        StrFixedLenField("TargetPartyExecutingTrader", 0x00, 6),
        StrFixedLenField("FirmNegotiationID", 0x00, 20),
        StrFixedLenField("FreeText5", 0x00, 132),
        StrFixedLenField("PartyOrderOriginationTrader", 0x00, 132),
        StrFixedLenField("Pad6", "000000", 6),
        PacketListField("QuotReqLegsGrp", None, QuotReqLegsGrpComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class SRQSOpenNegotiationRequest(Packet):
    name = 'SRQSOpenNegotiationRequest'
	# sizes = (400, 2480)

    fields_desc = [
        PacketField("MessageHeaderIn", None, MessageHeaderInComp),
        PacketField("RequestHeader", None, RequestHeaderComp),
        LESignedLongField("SecurityID", 0),
        LESignedLongField("BidPx", 0),
        LESignedLongField("OfferPx", 0),
        LESignedLongField("OrderQty", 0),
        LESignedLongField("QuoteRefPrice", 0),
        LESignedLongField("UnderlyingDeltaPercentage", 0),
        LELongField("ValidUntilTime", 0),
        LESignedIntField("MarketSegmentID", 0),
        LESignedIntField("SecuritySubType", 0),
        ByteField("QuoteType", 0),
        ByteField("QuoteSubType", 0),
        ByteField("NoLegs", 0),
        ByteField("NoTargetPartyIDs", 0),
        ByteField("NumberOfRespDisclosureInstruction", 0),
        ByteField("Side", 0),
        ByteField("ProductComplex", 0),
        ByteField("RespondentType", 0),
        ByteField("ShowLastDealOnClosure", 0),
        ByteField("BidPxIsLocked", 0),
        ByteField("OfferPxIsLocked", 0),
        ByteField("SideIsLocked", 0),
        ByteField("OrderQtyIsLocked", 0),
        ByteField("TradeAggregationTransType", 0),
        ByteField("QuoteCondition", 0),
        StrFixedLenField("PartyExecutingFirm", 0x00, 5),
        StrFixedLenField("PartyExecutingTrader", 0x00, 6),
        StrFixedLenField("FreeText5", 0x00, 132),
        StrFixedLenField("QuoteReqID", 0x00, 20),
        StrFixedLenField("PartyOrderOriginationTrader", 0x00, 132),
        StrFixedLenField("Pad2", "00", 2),
        PacketListField("QuotReqLegsGrp", None, QuotReqLegsGrpComp),
        PacketListField("TargetParties", None, TargetPartiesComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class SRQSOpenNegotiationRequesterNotification(Packet):
    name = 'SRQSOpenNegotiationRequesterNotification'
	# sizes = (464, 2544)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("RBCHeader", None, RBCHeaderComp),
        LELongField("TransactTime", 0),
        LESignedLongField("SecurityID", 0),
        LESignedLongField("BidPx", 0),
        LESignedLongField("OfferPx", 0),
        LESignedLongField("OrderQty", 0),
        LESignedLongField("LastPx", 0),
        LESignedLongField("LastQty", 0),
        LESignedLongField("QuoteRefPrice", 0),
        LESignedLongField("UnderlyingDeltaPercentage", 0),
        LELongField("ExpireTime", 0),
        LELongField("TradeToRequestRatio", 0),
        LEIntField("NegotiationID", 0),
        LESignedIntField("MarketSegmentID", 0),
        LESignedIntField("SecuritySubType", 0),
        LEIntField("NumberOfRespondents", 0),
        ByteField("QuoteType", 0),
        ByteField("QuoteSubType", 0),
        ByteField("NoLegs", 0),
        ByteField("NoTargetPartyIDs", 0),
        ByteField("Side", 0),
        ByteField("ProductComplex", 0),
        ByteField("NumberOfRespDisclosureInstruction", 0),
        ByteField("RespondentType", 0),
        ByteField("ShowLastDealOnClosure", 0),
        ByteField("BidPxIsLocked", 0),
        ByteField("OfferPxIsLocked", 0),
        ByteField("SideIsLocked", 0),
        ByteField("OrderQtyIsLocked", 0),
        ByteField("TradeAggregationTransType", 0),
        ByteField("QuoteCondition", 0),
        StrFixedLenField("PartyExecutingFirm", 0x00, 5),
        StrFixedLenField("PartyExecutingTrader", 0x00, 6),
        StrFixedLenField("PartyEnteringTrader", 0x00, 6),
        StrFixedLenField("FirmNegotiationID", 0x00, 20),
        StrFixedLenField("FreeText5", 0x00, 132),
        StrFixedLenField("PartyOrderOriginationTrader", 0x00, 132),
        StrFixedLenField("Pad4", "0000", 4),
        PacketListField("QuotReqLegsGrp", None, QuotReqLegsGrpComp),
        PacketListField("TargetParties", None, TargetPartiesComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class SRQSQuoteNotification(Packet):
    name = 'SRQSQuoteNotification'
	# sizes = (416, 416)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("RBCHeader", None, RBCHeaderComp),
        LELongField("TransactTime", 0),
        LELongField("QuoteID", 0),
        LELongField("SecondaryQuoteID", 0),
        LESignedLongField("BidPx", 0),
        LESignedLongField("BidSize", 0),
        LESignedLongField("OfferPx", 0),
        LESignedLongField("OfferSize", 0),
        LESignedLongField("UnderlyingDeltaPercentage", 0),
        LESignedLongField("QuoteRefPrice", 0),
        LELongField("ExpireTime", 0),
        LEIntField("NegotiationID", 0),
        ByteField("QuotingStatus", 0),
        ByteField("TradingCapacity", 0),
        ByteField("QuoteCancelReason", 0),
        StrFixedLenField("Pad1", "0", 1),
        LEIntField("PartyIDExecutingTrader", 0),
        StrFixedLenField("PartyExecutingFirm", 0x00, 5),
        StrFixedLenField("PartyExecutingTrader", 0x00, 6),
        StrFixedLenField("PartyEnteringTrader", 0x00, 6),
        StrFixedLenField("QuoteReqID", 0x00, 20),
        StrFixedLenField("FreeText1", 0x00, 12),
        StrFixedLenField("FreeText2", 0x00, 12),
        StrFixedLenField("FreeText3", 0x00, 12),
        StrFixedLenField("FreeText5", 0x00, 132),
        ByteField("PositionEffect", 0),
        StrFixedLenField("Account", 0x00, 2),
        StrFixedLenField("PartyIDBeneficiary", 0x00, 9),
        ByteField("CustOrderHandlingInst", 0),
        StrFixedLenField("PartyIDOrderOriginationFirm", 0x00, 7),
        StrFixedLenField("PartyIDPositionAccount", 0x00, 32),
        StrFixedLenField("PartyIDLocationID", 0x00, 2),
        StrFixedLenField("ComplianceText", 0x00, 20),
        StrFixedLenField("PartyIDTakeUpTradingFirm", 0x00, 5),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class SRQSQuoteResponse(Packet):
    name = 'SRQSQuoteResponse'
	# sizes = (64, 64)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("ResponseHeader", None, ResponseHeaderComp),
        LELongField("QuoteID", 0),
        LEIntField("NegotiationID", 0),
        StrFixedLenField("QuoteReqID", 0x00, 20),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class SRQSQuotingStatusRequest(Packet):
    name = 'SRQSQuotingStatusRequest'
	# sizes = (176, 176)

    fields_desc = [
        PacketField("MessageHeaderIn", None, MessageHeaderInComp),
        PacketField("RequestHeader", None, RequestHeaderComp),
        LESignedIntField("MarketSegmentID", 0),
        LEIntField("NegotiationID", 0),
        ByteField("QuotingStatus", 0),
        StrFixedLenField("PartyExecutingFirm", 0x00, 5),
        StrFixedLenField("PartyExecutingTrader", 0x00, 6),
        StrFixedLenField("FreeText5", 0x00, 132),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class SRQSStatusBroadcast(Packet):
    name = 'SRQSStatusBroadcast'
	# sizes = (48, 48)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("RBCHeader", None, RBCHeaderComp),
        LEIntField("TradeDate", 0),
        ByteField("TradSesEvent", 0),
        StrFixedLenField("Pad3", "000", 3),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class SRQSUpdateDealStatusRequest(Packet):
    name = 'SRQSUpdateDealStatusRequest'
	# sizes = (208, 208)

    fields_desc = [
        PacketField("MessageHeaderIn", None, MessageHeaderInComp),
        PacketField("RequestHeader", None, RequestHeaderComp),
        LESignedLongField("UnderlyingPriceStipValue", 0),
        LESignedLongField("UnderlyingPx", 0),
        LESignedLongField("LastQty", 0),
        LESignedIntField("MarketSegmentID", 0),
        LEIntField("NegotiationID", 0),
        LEIntField("TradeID", 0),
        ByteField("TradeReportType", 0),
        ByteField("TrdRptStatus", 0),
        StrFixedLenField("PartyExecutingFirm", 0x00, 5),
        StrFixedLenField("PartyExecutingTrader", 0x00, 6),
        StrFixedLenField("FreeText5", 0x00, 132),
        StrFixedLenField("Pad3", "000", 3),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class SRQSUpdateNegotiationRequest(Packet):
    name = 'SRQSUpdateNegotiationRequest'
	# sizes = (360, 1960)

    fields_desc = [
        PacketField("MessageHeaderIn", None, MessageHeaderInComp),
        PacketField("RequestHeader", None, RequestHeaderComp),
        LESignedLongField("QuoteRefPrice", 0),
        LESignedLongField("UnderlyingDeltaPercentage", 0),
        LESignedLongField("BidPx", 0),
        LESignedLongField("OfferPx", 0),
        LESignedLongField("OrderQty", 0),
        LESignedIntField("MarketSegmentID", 0),
        LEIntField("NegotiationID", 0),
        ByteField("NoTargetPartyIDs", 0),
        ByteField("NumberOfRespDisclosureInstruction", 0),
        ByteField("Side", 0),
        ByteField("ShowLastDealOnClosure", 0),
        ByteField("QuoteType", 0),
        ByteField("QuoteSubType", 0),
        ByteField("RespondentType", 0),
        ByteField("TradeAggregationTransType", 0),
        ByteField("QuoteCondition", 0),
        StrFixedLenField("PartyExecutingFirm", 0x00, 5),
        StrFixedLenField("PartyExecutingTrader", 0x00, 6),
        StrFixedLenField("FreeText5", 0x00, 132),
        StrFixedLenField("PartyOrderOriginationTrader", 0x00, 132),
        StrFixedLenField("Pad4", "0000", 4),
        PacketListField("TargetParties", None, TargetPartiesComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class ServiceAvailabilityBroadcast(Packet):
    name = 'ServiceAvailabilityBroadcast'
	# sizes = (56, 56)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("NRBCHeader", None, NRBCHeaderComp),
        LEIntField("MatchingEngineTradeDate", 0),
        LEIntField("TradeManagerTradeDate", 0),
        LEIntField("ApplSeqTradeDate", 0),
        LEIntField("T7EntryServiceTradeDate", 0),
        LEIntField("T7EntryServiceRtmTradeDate", 0),
        LEShortField("PartitionID", 0),
        ByteField("MatchingEngineStatus", 0),
        ByteField("TradeManagerStatus", 0),
        ByteField("ApplSeqStatus", 0),
        ByteField("T7EntryServiceStatus", 0),
        ByteField("T7EntryServiceRtmStatus", 0),
        StrFixedLenField("Pad5", "00000", 5),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class ServiceAvailabilityMarketBroadcast(Packet):
    name = 'ServiceAvailabilityMarketBroadcast'
	# sizes = (32, 32)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("NRBCHeader", None, NRBCHeaderComp),
        LEIntField("SelectiveRequestForQuoteServiceTradeDate", 0),
        ByteField("SelectiveRequestForQuoteServiceStatus", 0),
        ByteField("SelectiveRequestForQuoteRtmServiceStatus", 0),
        StrFixedLenField("Pad2", "00", 2),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class SubscribeRequest(Packet):
    name = 'SubscribeRequest'
	# sizes = (32, 32)

    fields_desc = [
        PacketField("MessageHeaderIn", None, MessageHeaderInComp),
        PacketField("RequestHeader", None, RequestHeaderComp),
        LEIntField("SubscriptionScope", 0),
        ByteField("RefApplID", 0),
        StrFixedLenField("Pad3", "000", 3),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class SubscribeResponse(Packet):
    name = 'SubscribeResponse'
	# sizes = (40, 40)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("ResponseHeader", None, ResponseHeaderComp),
        LEIntField("ApplSubID", 0),
        StrFixedLenField("Pad4", "0000", 4),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class TESApproveBroadcast(Packet):
    name = 'TESApproveBroadcast'
	# sizes = (424, 3200)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("RBCHeader", None, RBCHeaderComp),
        LESignedLongField("SecurityID", 0),
        LESignedLongField("LastPx", 0),
        LESignedLongField("AllocQty", 0),
        LELongField("TransactTime", 0),
        LESignedLongField("UnderlyingPx", 0),
        LELongField("TransBkdTime", 0),
        LESignedLongField("RelatedClosePrice", 0),
        LESignedLongField("RelatedTradeQuantity", 0),
        LESignedLongField("UnderlyingQty", 0),
        LELongField("CompressionID", 0),
        LESignedIntField("MarketSegmentID", 0),
        LEIntField("PackageID", 0),
        LEIntField("TESExecID", 0),
        LEIntField("AllocID", 0),
        LEIntField("UnderlyingSettlementDate", 0),
        LEIntField("UnderlyingMaturityDate", 0),
        LEIntField("RelatedTradeID", 0),
        LESignedIntField("RelatedMarketSegmentID", 0),
        LEIntField("NegotiationID", 0),
        LEIntField("TESEnrichmentRuleID", 0),
        LEIntField("AutoApprovalRuleID", 0),
        LEShortField("TrdType", 0),
        LEShortField("VarTextLen", 0),
        ByteField("Side", 0),
        ByteField("TradePublishIndicator", 0),
        ByteField("ProductComplex", 0),
        ByteField("TradeReportType", 0),
        ByteField("TrdRptStatus", 0),
        ByteField("TradingCapacity", 0),
        ByteField("PartyIDSettlementLocation", 0),
        ByteField("TradeAllocStatus", 0),
        ByteField("HedgeType", 0),
        ByteField("NoLegs", 0),
        ByteField("NoEvents", 0),
        ByteField("NoInstrAttrib", 0),
        ByteField("NoUnderlyingStips", 0),
        ByteField("MessageEventSource", 0),
        StrFixedLenField("TradeReportID", 0x00, 20),
        StrFixedLenField("PartyExecutingFirm", 0x00, 5),
        StrFixedLenField("PartyExecutingTrader", 0x00, 6),
        ByteField("PartyIDEnteringFirm", 0),
        StrFixedLenField("PartyEnteringTrader", 0x00, 6),
        ByteField("PositionEffect", 0),
        StrFixedLenField("RootPartyExecutingFirm", 0x00, 5),
        StrFixedLenField("RootPartyExecutingTrader", 0x00, 6),
        StrFixedLenField("FreeText1", 0x00, 12),
        StrFixedLenField("FreeText2", 0x00, 12),
        StrFixedLenField("FreeText3", 0x00, 12),
        StrFixedLenField("PartyIDTakeUpTradingFirm", 0x00, 5),
        StrFixedLenField("Account", 0x00, 2),
        StrFixedLenField("PartyIDPositionAccount", 0x00, 32),
        StrFixedLenField("PartyIDOrderOriginationFirm", 0x00, 7),
        StrFixedLenField("PartyIDBeneficiary", 0x00, 9),
        StrFixedLenField("PartyIDLocationID", 0x00, 2),
        ByteField("CustOrderHandlingInst", 0),
        StrFixedLenField("ComplianceText", 0x00, 20),
        StrFixedLenField("UnderlyingSecurityID", 0x00, 12),
        StrFixedLenField("UnderlyingSecurityDesc", 0x00, 30),
        StrFixedLenField("UnderlyingCurrency", 0x00, 3),
        StrFixedLenField("UnderlyingIssuer", 0x00, 30),
        StrFixedLenField("Pad3", "000", 3),
        PacketListField("TrdInstrmntLegGrp", None, TrdInstrmntLegGrpComp),
        PacketListField("InstrumentEventGrp", None, InstrumentEventGrpComp),
        PacketListField("InstrumentAttributeGrp", None, InstrumentAttributeGrpComp),
        PacketListField("UnderlyingStipGrp", None, UnderlyingStipGrpComp),
        StrFixedLenField("VarText", 0, 2000),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class TESBroadcast(Packet):
    name = 'TESBroadcast'
	# sizes = (328, 7024)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("RBCHeader", None, RBCHeaderComp),
        LESignedLongField("SecurityID", 0),
        LESignedLongField("LastPx", 0),
        LELongField("TransactTime", 0),
        LESignedLongField("UnderlyingPx", 0),
        LELongField("TransBkdTime", 0),
        LESignedLongField("RelatedClosePrice", 0),
        LESignedLongField("RelatedTradeQuantity", 0),
        LESignedLongField("UnderlyingQty", 0),
        LELongField("CompressionID", 0),
        LESignedIntField("MarketSegmentID", 0),
        LEIntField("PackageID", 0),
        LEIntField("TESExecID", 0),
        LEIntField("UnderlyingSettlementDate", 0),
        LEIntField("UnderlyingMaturityDate", 0),
        LEIntField("RelatedTradeID", 0),
        LESignedIntField("RelatedMarketSegmentID", 0),
        LEIntField("AutoApprovalRuleID", 0),
        LEShortField("TrdType", 0),
        LEShortField("VarTextLen", 0),
        ByteField("TradeReportType", 0),
        ByteField("TrdRptStatus", 0),
        ByteField("ProductComplex", 0),
        ByteField("TradePublishIndicator", 0),
        ByteField("NoEvents", 0),
        ByteField("NoInstrAttrib", 0),
        ByteField("NoUnderlyingStips", 0),
        ByteField("NoSideAllocs", 0),
        ByteField("NoLegs", 0),
        ByteField("PartyIDSettlementLocation", 0),
        ByteField("HedgeType", 0),
        ByteField("SwapClearer", 0),
        ByteField("MessageEventSource", 0),
        StrFixedLenField("TradeReportText", 0x00, 20),
        StrFixedLenField("TradeReportID", 0x00, 20),
        StrFixedLenField("RootPartyExecutingFirm", 0x00, 5),
        StrFixedLenField("RootPartyExecutingTrader", 0x00, 6),
        StrFixedLenField("UnderlyingSecurityID", 0x00, 12),
        StrFixedLenField("UnderlyingSecurityDesc", 0x00, 30),
        StrFixedLenField("UnderlyingCurrency", 0x00, 3),
        StrFixedLenField("UnderlyingIssuer", 0x00, 30),
        StrFixedLenField("Pad1", "0", 1),
        PacketListField("SideAllocGrpBC", None, SideAllocGrpBCComp),
        PacketListField("TrdInstrmntLegGrp", None, TrdInstrmntLegGrpComp),
        PacketListField("InstrumentEventGrp", None, InstrumentEventGrpComp),
        PacketListField("InstrumentAttributeGrp", None, InstrumentAttributeGrpComp),
        PacketListField("UnderlyingStipGrp", None, UnderlyingStipGrpComp),
        StrFixedLenField("VarText", 0, 2000),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class TESCompressionRunStatusBroadcast(Packet):
    name = 'TESCompressionRunStatusBroadcast'
	# sizes = (56, 56)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("RBCHeader", None, RBCHeaderComp),
        LELongField("CompressionID", 0),
        LESignedIntField("MarketSegmentID", 0),
        ByteField("CompressionAction", 0),
        ByteField("CompressionStatus", 0),
        ByteField("TradePublishIndicator", 0),
        StrFixedLenField("Pad1", "0", 1),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class TESCompressionRunStatusRequest(Packet):
    name = 'TESCompressionRunStatusRequest'
	# sizes = (40, 40)

    fields_desc = [
        PacketField("MessageHeaderIn", None, MessageHeaderInComp),
        PacketField("RequestHeader", None, RequestHeaderComp),
        LELongField("CompressionID", 0),
        LESignedIntField("MarketSegmentID", 0),
        ByteField("CompressionAction", 0),
        ByteField("TradePublishIndicator", 0),
        StrFixedLenField("Pad2", "00", 2),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class TESCompressionRunStatusResponse(Packet):
    name = 'TESCompressionRunStatusResponse'
	# sizes = (48, 48)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("ResponseHeader", None, ResponseHeaderComp),
        LELongField("CompressionID", 0),
        LESignedIntField("MarketSegmentID", 0),
        ByteField("CompressionAction", 0),
        ByteField("CompressionStatus", 0),
        ByteField("TradePublishIndicator", 0),
        StrFixedLenField("Pad1", "0", 1),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class TESDeleteBroadcast(Packet):
    name = 'TESDeleteBroadcast'
	# sizes = (96, 96)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("RBCHeader", None, RBCHeaderComp),
        LELongField("TransactTime", 0),
        LELongField("CompressionID", 0),
        LESignedIntField("MarketSegmentID", 0),
        LEIntField("PackageID", 0),
        LEIntField("TESExecID", 0),
        LEShortField("TrdType", 0),
        ByteField("DeleteReason", 0),
        ByteField("TradeReportType", 0),
        ByteField("TrdRptStatus", 0),
        ByteField("MessageEventSource", 0),
        StrFixedLenField("TradeReportID", 0x00, 20),
        StrFixedLenField("Pad2", "00", 2),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class TESExecutionBroadcast(Packet):
    name = 'TESExecutionBroadcast'
	# sizes = (80, 80)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("RBCHeader", None, RBCHeaderComp),
        LELongField("TransactTime", 0),
        LELongField("CompressionID", 0),
        LESignedIntField("MarketSegmentID", 0),
        LEIntField("PackageID", 0),
        LEIntField("TESExecID", 0),
        LEIntField("AllocID", 0),
        LEShortField("TrdType", 0),
        ByteField("TradeReportType", 0),
        ByteField("Side", 0),
        ByteField("TrdRptStatus", 0),
        ByteField("MessageEventSource", 0),
        StrFixedLenField("Pad2", "00", 2),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class TESResponse(Packet):
    name = 'TESResponse'
	# sizes = (56, 56)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("ResponseHeader", None, ResponseHeaderComp),
        LEIntField("TESExecID", 0),
        StrFixedLenField("TradeReportID", 0x00, 20),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class TESReversalBroadcast(Packet):
    name = 'TESReversalBroadcast'
	# sizes = (264, 4184)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("RBCHeader", None, RBCHeaderComp),
        LELongField("ReversalInitiationTime", 0),
        LESignedIntField("MarketSegmentID", 0),
        LEIntField("PackageID", 0),
        LEIntField("TESExecID", 0),
        LESignedIntField("RelatedMarketSegmentID", 0),
        LEShortField("TrdType", 0),
        ByteField("TrdRptStatus", 0),
        ByteField("ReversalCancellationReason", 0),
        ByteField("NoSideAllocs", 0),
        StrFixedLenField("TradeReportID", 0x00, 20),
        StrFixedLenField("ReversalReasonText", 0x00, 132),
        StrFixedLenField("Pad3", "000", 3),
        PacketListField("SideAllocGrpBC", None, SideAllocGrpBCComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class TESTradeBroadcast(Packet):
    name = 'TESTradeBroadcast'
	# sizes = (440, 440)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("RBCHeader", None, RBCHeaderComp),
        LESignedLongField("SecurityID", 0),
        LESignedLongField("LastPx", 0),
        LESignedLongField("LastQty", 0),
        LESignedLongField("ClearingTradePrice", 0),
        LESignedLongField("ClearingTradeQty", 0),
        LELongField("TransactTime", 0),
        LESignedLongField("RelatedSecurityID", 0),
        LELongField("CompressionID", 0),
        LELongField("RootPartyIDClientID", 0),
        LELongField("ExecutingTrader", 0),
        LELongField("RootPartyIDInvestmentDecisionMaker", 0),
        LELongField("BasketTrdMatchID", 0),
        LESignedLongField("SideLastPx", 0),
        LESignedLongField("SideLastQty", 0),
        LESignedLongField("RelatedClosePrice", 0),
        LEIntField("PackageID", 0),
        LESignedIntField("MarketSegmentID", 0),
        LEIntField("TradeID", 0),
        LEIntField("TradeDate", 0),
        LEIntField("SideTradeID", 0),
        LEIntField("RootPartyIDSessionID", 0),
        LEIntField("OrigTradeID", 0),
        LEIntField("RootPartyIDExecutingUnit", 0),
        LEIntField("RootPartyIDExecutingTrader", 0),
        LEIntField("RootPartyIDClearingUnit", 0),
        LEIntField("StrategyLinkID", 0),
        LESignedIntField("RelatedSymbol", 0),
        LESignedIntField("TotNumTradeReports", 0),
        LEIntField("NegotiationID", 0),
        LEIntField("SRQSRelatedTradeID", 0),
        LEIntField("BasketProfileID", 0),
        LESignedIntField("SecuritySubType", 0),
        LEShortField("TrdType", 0),
        ByteField("ProductComplex", 0),
        ByteField("RelatedProductComplex", 0),
        ByteField("Side", 0),
        ByteField("TradingCapacity", 0),
        ByteField("TradeReportType", 0),
        ByteField("TransferReason", 0),
        ByteField("TradePublishIndicator", 0),
        ByteField("MultiLegReportingType", 0),
        ByteField("PositionEffect", 0),
        ByteField("MultilegPriceModel", 0),
        ByteField("OrderAttributeLiquidityProvision", 0),
        ByteField("OrderAttributeRiskReduction", 0),
        ByteField("ExecutingTraderQualifier", 0),
        ByteField("RootPartyIDInvestmentDecisionMakerQualifier", 0),
        ByteField("OrderOrigination", 0),
        ByteField("ReversalIndicator", 0),
        ByteField("TradeAggregationTransType", 0),
        StrFixedLenField("Account", 0x00, 2),
        StrFixedLenField("RootPartyIDPositionAccount", 0x00, 32),
        ByteField("CustOrderHandlingInst", 0),
        StrFixedLenField("FreeText1", 0x00, 12),
        StrFixedLenField("FreeText2", 0x00, 12),
        StrFixedLenField("FreeText3", 0x00, 12),
        StrFixedLenField("RootPartyExecutingFirm", 0x00, 5),
        StrFixedLenField("RootPartyExecutingTrader", 0x00, 6),
        StrFixedLenField("RootPartyClearingFirm", 0x00, 5),
        StrFixedLenField("RootPartyClearingOrganization", 0x00, 4),
        StrFixedLenField("RootPartyIDBeneficiary", 0x00, 9),
        StrFixedLenField("RootPartyIDTakeUpTradingFirm", 0x00, 5),
        StrFixedLenField("RootPartyIDOrderOriginationFirm", 0x00, 7),
        StrFixedLenField("RootPartyIDExecutionVenue", 0x00, 4),
        StrFixedLenField("RegulatoryTradeID", 0x00, 52),
        StrFixedLenField("BasketPartyContraFirm", 0x00, 5),
        StrFixedLenField("BasketSideTradeReportID", 0x00, 20),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class TESTradingSessionStatusBroadcast(Packet):
    name = 'TESTradingSessionStatusBroadcast'
	# sizes = (48, 48)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("RBCHeader", None, RBCHeaderComp),
        LEIntField("TradeDate", 0),
        ByteField("TradSesEvent", 0),
        StrFixedLenField("Pad3", "000", 3),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class TESUploadBroadcast(Packet):
    name = 'TESUploadBroadcast'
	# sizes = (440, 18464)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("RBCHeader", None, RBCHeaderComp),
        LESignedLongField("SecurityID", 0),
        LESignedLongField("LastPx", 0),
        LELongField("TransBkdTime", 0),
        LELongField("TransactTime", 0),
        LESignedLongField("UnderlyingPx", 0),
        LESignedLongField("RelatedClosePrice", 0),
        LESignedLongField("RelatedTradeQuantity", 0),
        LESignedLongField("UnderlyingQty", 0),
        LELongField("CompressionID", 0),
        LESignedIntField("MarketSegmentID", 0),
        LEIntField("PackageID", 0),
        LEIntField("TESExecID", 0),
        LEIntField("UnderlyingSettlementDate", 0),
        LEIntField("UnderlyingMaturityDate", 0),
        LEIntField("RelatedTradeID", 0),
        LESignedIntField("RelatedMarketSegmentID", 0),
        LEShortField("TrdType", 0),
        ByteField("ProductComplex", 0),
        ByteField("TradeReportType", 0),
        ByteField("TrdRptStatus", 0),
        ByteField("TradePublishIndicator", 0),
        ByteField("TradePlatform", 0),
        ByteField("NoSideAllocs", 0),
        ByteField("NoLegs", 0),
        ByteField("NoEvents", 0),
        ByteField("NoInstrAttrib", 0),
        ByteField("NoUnderlyingStips", 0),
        ByteField("HedgeType", 0),
        ByteField("PartyIDSettlementLocation", 0),
        ByteField("SwapClearer", 0),
        ByteField("MessageEventSource", 0),
        StrFixedLenField("TradeReportID", 0x00, 20),
        StrFixedLenField("RootPartyExecutingFirm", 0x00, 5),
        StrFixedLenField("RootPartyExecutingTrader", 0x00, 6),
        StrFixedLenField("UnderlyingSecurityID", 0x00, 12),
        StrFixedLenField("UnderlyingSecurityDesc", 0x00, 30),
        StrFixedLenField("UnderlyingCurrency", 0x00, 3),
        StrFixedLenField("UnderlyingIssuer", 0x00, 30),
        StrFixedLenField("Pad2", "00", 2),
        PacketListField("SideAllocExtGrp", None, SideAllocExtGrpComp),
        PacketListField("TrdInstrmntLegGrp", None, TrdInstrmntLegGrpComp),
        PacketListField("InstrumentEventGrp", None, InstrumentEventGrpComp),
        PacketListField("InstrumentAttributeGrp", None, InstrumentAttributeGrpComp),
        PacketListField("UnderlyingStipGrp", None, UnderlyingStipGrpComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class TMTradingSessionStatusBroadcast(Packet):
    name = 'TMTradingSessionStatusBroadcast'
	# sizes = (48, 48)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("RBCHeader", None, RBCHeaderComp),
        ByteField("TradSesEvent", 0),
        StrFixedLenField("Pad7", "0000000", 7),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class ThrottleUpdateNotification(Packet):
    name = 'ThrottleUpdateNotification'
	# sizes = (32, 32)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("NotifHeader", None, NotifHeaderComp),
        LESignedLongField("ThrottleTimeInterval", 0),
        LEIntField("ThrottleNoMsgs", 0),
        LEIntField("ThrottleDisconnectLimit", 0),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class TradeBroadcast(Packet):
    name = 'TradeBroadcast'
	# sizes = (432, 432)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("RBCHeader", None, RBCHeaderComp),
        LESignedLongField("SecurityID", 0),
        LESignedLongField("RelatedSecurityID", 0),
        LESignedLongField("Price", 0),
        LESignedLongField("LastPx", 0),
        LESignedLongField("LastQty", 0),
        LESignedLongField("SideLastPx", 0),
        LESignedLongField("SideLastQty", 0),
        LESignedLongField("ClearingTradePrice", 0),
        LESignedLongField("ClearingTradeQty", 0),
        LELongField("TransactTime", 0),
        LELongField("OrderID", 0),
        LELongField("ClOrdID", 0),
        LESignedLongField("LeavesQty", 0),
        LESignedLongField("CumQty", 0),
        LELongField("RootPartyIDClientID", 0),
        LELongField("ExecutingTrader", 0),
        LELongField("RootPartyIDInvestmentDecisionMaker", 0),
        LESignedLongField("UnderlyingPx", 0),
        LEIntField("TradeID", 0),
        LEIntField("OrigTradeID", 0),
        LEIntField("RootPartyIDExecutingUnit", 0),
        LEIntField("RootPartyIDSessionID", 0),
        LEIntField("RootPartyIDExecutingTrader", 0),
        LEIntField("RootPartyIDClearingUnit", 0),
        LESignedIntField("MarketSegmentID", 0),
        LESignedIntField("RelatedSymbol", 0),
        LEIntField("SideTradeID", 0),
        LEIntField("MatchDate", 0),
        LEIntField("TrdMatchID", 0),
        LEIntField("StrategyLinkID", 0),
        LESignedIntField("TotNumTradeReports", 0),
        LESignedIntField("SecuritySubType", 0),
        ByteField("MultiLegReportingType", 0),
        ByteField("TradeReportType", 0),
        ByteField("TransferReason", 0),
        StrFixedLenField("RootPartyIDBeneficiary", 0x00, 9),
        StrFixedLenField("RootPartyIDTakeUpTradingFirm", 0x00, 5),
        StrFixedLenField("RootPartyIDOrderOriginationFirm", 0x00, 7),
        ByteField("MatchType", 0),
        ByteField("MatchSubType", 0),
        ByteField("Side", 0),
        ByteField("SideLiquidityInd", 0),
        ByteField("TradingCapacity", 0),
        ByteField("OrderOrigination", 0),
        ByteField("OrderAttributeLiquidityProvision", 0),
        ByteField("OrderAttributeRiskReduction", 0),
        ByteField("ExecutingTraderQualifier", 0),
        ByteField("RootPartyIDInvestmentDecisionMakerQualifier", 0),
        StrFixedLenField("Account", 0x00, 2),
        StrFixedLenField("RootPartyIDPositionAccount", 0x00, 32),
        ByteField("PositionEffect", 0),
        ByteField("CustOrderHandlingInst", 0),
        StrFixedLenField("FreeText1", 0x00, 12),
        StrFixedLenField("FreeText2", 0x00, 12),
        StrFixedLenField("FreeText3", 0x00, 12),
        ByteField("OrderCategory", 0),
        ByteField("OrdType", 0),
        ByteField("RelatedProductComplex", 0),
        ByteField("OrderSide", 0),
        StrFixedLenField("RootPartyClearingOrganization", 0x00, 4),
        StrFixedLenField("RootPartyExecutingFirm", 0x00, 5),
        StrFixedLenField("RootPartyExecutingTrader", 0x00, 6),
        StrFixedLenField("RootPartyClearingFirm", 0x00, 5),
        StrFixedLenField("RegulatoryTradeID", 0x00, 52),
        StrFixedLenField("RootPartyIDExecutionVenue", 0x00, 4),
        StrFixedLenField("Pad6", "000000", 6),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class TradingSessionStatusBroadcast(Packet):
    name = 'TradingSessionStatusBroadcast'
	# sizes = (96, 96)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("RBCHeaderME", None, RBCHeaderMEComp),
        LESignedIntField("MarketSegmentID", 0),
        LEIntField("TradeDate", 0),
        ByteField("TradSesEvent", 0),
        StrFixedLenField("RefApplLastMsgID", 0x00000000000000000000000000000000, 16),
        StrFixedLenField("Pad7", "0000000", 7),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class UnsubscribeRequest(Packet):
    name = 'UnsubscribeRequest'
	# sizes = (32, 32)

    fields_desc = [
        PacketField("MessageHeaderIn", None, MessageHeaderInComp),
        PacketField("RequestHeader", None, RequestHeaderComp),
        LEIntField("RefApplSubID", 0),
        StrFixedLenField("Pad4", "0000", 4),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class UnsubscribeResponse(Packet):
    name = 'UnsubscribeResponse'
	# sizes = (32, 32)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("ResponseHeader", None, ResponseHeaderComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class UploadTESTradeRequest(Packet):
    name = 'UploadTESTradeRequest'
	# sizes = (416, 18440)

    fields_desc = [
        PacketField("MessageHeaderIn", None, MessageHeaderInComp),
        PacketField("RequestHeader", None, RequestHeaderComp),
        LESignedLongField("SecurityID", 0),
        LESignedLongField("LastPx", 0),
        LELongField("TransBkdTime", 0),
        LESignedLongField("UnderlyingPx", 0),
        LESignedLongField("RelatedClosePrice", 0),
        LESignedLongField("RelatedTradeQuantity", 0),
        LESignedLongField("UnderlyingQty", 0),
        LELongField("CompressionID", 0),
        LESignedIntField("MarketSegmentID", 0),
        LEIntField("UnderlyingSettlementDate", 0),
        LEIntField("UnderlyingMaturityDate", 0),
        LEIntField("RelatedTradeID", 0),
        LESignedIntField("RelatedMarketSegmentID", 0),
        LEShortField("TrdType", 0),
        ByteField("ProductComplex", 0),
        ByteField("TradeReportType", 0),
        ByteField("TradePublishIndicator", 0),
        ByteField("NoSideAllocs", 0),
        ByteField("NoLegs", 0),
        ByteField("NoEvents", 0),
        ByteField("NoInstrAttrib", 0),
        ByteField("NoUnderlyingStips", 0),
        ByteField("SkipValidations", 0),
        ByteField("TrdRptStatus", 0),
        ByteField("TradePlatform", 0),
        ByteField("HedgeType", 0),
        ByteField("PartyIDSettlementLocation", 0),
        ByteField("ValueCheckTypeMinLotSize", 0),
        StrFixedLenField("TradeReportID", 0x00, 20),
        StrFixedLenField("TradeReportText", 0x00, 20),
        StrFixedLenField("UnderlyingSecurityID", 0x00, 12),
        StrFixedLenField("UnderlyingSecurityDesc", 0x00, 30),
        StrFixedLenField("UnderlyingCurrency", 0x00, 3),
        StrFixedLenField("UnderlyingIssuer", 0x00, 30),
        ByteField("SwapClearer", 0),
        PacketListField("SideAllocExtGrp", None, SideAllocExtGrpComp),
        PacketListField("TrdInstrmntLegGrp", None, TrdInstrmntLegGrpComp),
        PacketListField("InstrumentEventGrp", None, InstrumentEventGrpComp),
        PacketListField("InstrumentAttributeGrp", None, InstrumentAttributeGrpComp),
        PacketListField("UnderlyingStipGrp", None, UnderlyingStipGrpComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class UserLoginRequest(Packet):
    name = 'UserLoginRequest'
	# sizes = (64, 64)

    fields_desc = [
        PacketField("MessageHeaderIn", None, MessageHeaderInComp),
        PacketField("RequestHeader", None, RequestHeaderComp),
        LEIntField("Username", 0),
        StrFixedLenField("Password", 0x00, 32),
        StrFixedLenField("Pad4", "0000", 4),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class UserLoginResponse(Packet):
    name = 'UserLoginResponse'
	# sizes = (32, 32)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("ResponseHeader", None, ResponseHeaderComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class UserLogoutRequest(Packet):
    name = 'UserLogoutRequest'
	# sizes = (32, 32)

    fields_desc = [
        PacketField("MessageHeaderIn", None, MessageHeaderInComp),
        PacketField("RequestHeader", None, RequestHeaderComp),
        LEIntField("Username", 0),
        StrFixedLenField("Pad4", "0000", 4),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
class UserLogoutResponse(Packet):
    name = 'UserLogoutResponse'
	# sizes = (32, 32)

    fields_desc = [
        PacketField("MessageHeaderOut", None, MessageHeaderOutComp),
        PacketField("ResponseHeader", None, ResponseHeaderComp),
    ]


    def post_build(self, p, pay):
        # p += pay  # if you also want the payload to be taken into account
        if True:
            tmp_len = len(p) # edit as you want
            # p = p[:2] + struct.pack("<I", tmp_len) + p[4:]  # Adds length as short on bytes 3-4
            p = struct.pack("<H", tmp_len) + p[2:]
        return p + pay # edit if previous is changed
	
bind_layers(UDP, PacketHeader, sport=65333, dport=65333)
